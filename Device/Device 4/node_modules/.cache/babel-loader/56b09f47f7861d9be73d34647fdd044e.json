{"ast":null,"code":"'use strict';\n/**\n * @file\n *\n * Copyright 2018 FutoIn Project (https://futoin.org)\n * Copyright 2018 Andrey Galkin <andrey@futoin.org>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst {\n  createHash,\n  createHmac\n} = require('crypto');\n\nconst g_digestLenCache = {};\n/**\n * Get expected hash length.\n *\n * @func\n * @alias hkdf.hash_length\n * @param {string} hash - Hash algorithm (as in underlying Node.js crypto library)\n * @returns {integer} hash digest byte length\n *\n * @note Values are hardcoded with fallback for unknown algorithms.\n */\n\nconst hash_length = hash => {\n  switch (hash) {\n    case 'sha256':\n      return 32;\n\n    case 'sha512':\n      return 64;\n\n    case 'sha224':\n      return 28;\n\n    case 'sha384':\n      return 48;\n\n    case 'sha3-256':\n      return 32;\n\n    case 'sha3-512':\n      return 64;\n\n    case 'sha3-224':\n      return 28;\n\n    case 'sha3-384':\n      return 48;\n\n    case 'blake2s256':\n      return 32;\n\n    case 'blake2b512':\n      return 64;\n\n    case 'sha1':\n      return 20;\n\n    case 'md5':\n      return 16;\n\n    default:\n      {\n        let len = g_digestLenCache[hash];\n\n        if (len === undefined) {\n          len = createHash(hash).digest().length;\n          g_digestLenCache[hash] = len;\n        }\n\n        return len;\n      }\n  }\n};\n/**\n * HKDF extract action.\n *\n * @func\n * @alias hkdf.extract\n * @param {string} hash - Hash algorithm (as in underlying Node.js crypto library)\n * @param {integer} hash_len - Hash digest length\n * @param {Buffer|string} ikm - Initial Keying Material\n * @param {Buffer|string} salt - Optional salt (recommended)\n * @returns {Buffer} A buffer with pseudorandom key\n *\n * @note Values are hardcoded with fallback for unknown algorithms.\n */\n\n\nconst hkdf_extract = (hash, hash_len, ikm, salt) => {\n  const b_ikm = Buffer.isBuffer(ikm) ? ikm : Buffer.from(ikm);\n  const b_salt = salt && salt.length ? Buffer.from(salt) : Buffer.alloc(hash_len, 0);\n  return createHmac(hash, b_salt).update(b_ikm).digest();\n};\n/**\n * HKDF expand action.\n *\n * @func\n * @alias hkdf.expand\n * @param {string} hash - Hash algorithm (as in underlying Node.js crypto library)\n * @param {integer} hash_len - Hash digest length\n * @param {Buffer|string} prk - A buffer with pseudorandom key\n * @param {integer} length - length of output keying material in octets\n * @param {Buffer|string} info - Optional context (safe to skip)\n * @returns {Buffer} A buffer with output keying material\n *\n * @note Values are hardcoded with fallback for unknown algorithms.\n */\n\n\nconst hkdf_expand = (hash, hash_len, prk, length, info) => {\n  const b_info = Buffer.isBuffer(info) ? info : Buffer.from(info || '');\n  const info_len = b_info.length;\n  const steps = Math.ceil(length / hash_len);\n\n  if (steps > 0xFF) {\n    throw new Error(`OKM length ${length} is too long for ${hash} hash`);\n  } // use single buffer with unnecessary create/copy/move operations\n\n\n  const t = Buffer.alloc(hash_len * steps + info_len + 1);\n\n  for (let c = 1, start = 0, end = 0; c <= steps; ++c) {\n    // add info\n    b_info.copy(t, end); // add counter\n\n    t[end + info_len] = c;\n    createHmac(hash, prk) // use view: T(C) = T(C-1) | info | C\n    .update(t.slice(start, end + info_len + 1)).digest() // put back to the same buffer\n    .copy(t, end);\n    start = end; // used for T(C-1) start\n\n    end += hash_len; // used for T(C-1) end & overall end\n  }\n\n  return t.slice(0, length);\n};\n/**\n * HMAC-based Extract-and-Expand Key Derivation Function (HKDF)\n *\n * @param {Buffer|string} ikm - Initial Keying Material\n * @param {integer} length - Required byte length of output\n * @param {Buffer|string} salt='' - Optional salt (recommended)\n * @param {Buffer|string} info='' - Optional context (safe to skip)\n * @param {string} hash='SHA-256' - HMAC hash function to use\n * @returns {Buffer} Raw buffer with derived key of @p length bytes\n */\n\n\nfunction hkdf(ikm, length, {\n  salt = '',\n  info = '',\n  hash = 'SHA-256'\n} = {}) {\n  hash = hash.toLowerCase().replace('-', ''); // 0. Hash length\n\n  const hash_len = hash_length(hash); // 1. extract\n\n  const prk = hkdf_extract(hash, hash_len, ikm, salt); // 2. expand\n\n  return hkdf_expand(hash, hash_len, prk, length, info);\n}\n\nObject.defineProperties(hkdf, {\n  hash_length: {\n    configurable: false,\n    enumerable: false,\n    writable: false,\n    value: hash_length\n  },\n  extract: {\n    configurable: false,\n    enumerable: false,\n    writable: false,\n    value: hkdf_extract\n  },\n  expand: {\n    configurable: false,\n    enumerable: false,\n    writable: false,\n    value: hkdf_expand\n  }\n});\nmodule.exports = hkdf;","map":{"version":3,"sources":["C:/Users/abhi/Desktop/etherium/endproject/Device/Device 1/node_modules/futoin-hkdf/hkdf.js"],"names":["Buffer","require","createHash","createHmac","g_digestLenCache","hash_length","hash","len","undefined","digest","length","hkdf_extract","hash_len","ikm","salt","b_ikm","isBuffer","from","b_salt","alloc","update","hkdf_expand","prk","info","b_info","info_len","steps","Math","ceil","Error","t","c","start","end","copy","slice","hkdf","toLowerCase","replace","Object","defineProperties","configurable","enumerable","writable","value","extract","expand","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * @file\n *\n * Copyright 2018 FutoIn Project (https://futoin.org)\n * Copyright 2018 Andrey Galkin <andrey@futoin.org>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst { Buffer } = require( 'buffer' );\nconst { createHash, createHmac } = require( 'crypto' );\n\nconst g_digestLenCache = {};\n\n/**\n * Get expected hash length.\n *\n * @func\n * @alias hkdf.hash_length\n * @param {string} hash - Hash algorithm (as in underlying Node.js crypto library)\n * @returns {integer} hash digest byte length\n *\n * @note Values are hardcoded with fallback for unknown algorithms.\n */\nconst hash_length = ( hash ) => {\n    switch ( hash ) {\n    case 'sha256': return 32;\n    case 'sha512': return 64;\n    case 'sha224': return 28;\n    case 'sha384': return 48;\n    case 'sha3-256': return 32;\n    case 'sha3-512': return 64;\n    case 'sha3-224': return 28;\n    case 'sha3-384': return 48;\n    case 'blake2s256': return 32;\n    case 'blake2b512': return 64;\n    case 'sha1': return 20;\n    case 'md5': return 16;\n    default: {\n        let len = g_digestLenCache[hash];\n\n        if ( len === undefined ) {\n            len = createHash( hash ).digest().length;\n            g_digestLenCache[hash] = len;\n        }\n\n        return len;\n    }\n    }\n};\n\n/**\n * HKDF extract action.\n *\n * @func\n * @alias hkdf.extract\n * @param {string} hash - Hash algorithm (as in underlying Node.js crypto library)\n * @param {integer} hash_len - Hash digest length\n * @param {Buffer|string} ikm - Initial Keying Material\n * @param {Buffer|string} salt - Optional salt (recommended)\n * @returns {Buffer} A buffer with pseudorandom key\n *\n * @note Values are hardcoded with fallback for unknown algorithms.\n */\nconst hkdf_extract = ( hash, hash_len, ikm, salt ) => {\n    const b_ikm = Buffer.isBuffer( ikm ) ? ikm : Buffer.from( ikm );\n    const b_salt = ( salt && salt.length ) ? Buffer.from( salt ) : Buffer.alloc( hash_len, 0 );\n\n    return createHmac( hash, b_salt ).update( b_ikm ).digest();\n};\n\n/**\n * HKDF expand action.\n *\n * @func\n * @alias hkdf.expand\n * @param {string} hash - Hash algorithm (as in underlying Node.js crypto library)\n * @param {integer} hash_len - Hash digest length\n * @param {Buffer|string} prk - A buffer with pseudorandom key\n * @param {integer} length - length of output keying material in octets\n * @param {Buffer|string} info - Optional context (safe to skip)\n * @returns {Buffer} A buffer with output keying material\n *\n * @note Values are hardcoded with fallback for unknown algorithms.\n */\nconst hkdf_expand = ( hash, hash_len, prk, length, info ) => {\n    const b_info = Buffer.isBuffer( info ) ? info : Buffer.from( info || '' );\n    const info_len = b_info.length;\n\n    const steps = Math.ceil( length / hash_len );\n\n    if ( steps > 0xFF ) {\n        throw new Error( `OKM length ${length} is too long for ${hash} hash` );\n    }\n\n    // use single buffer with unnecessary create/copy/move operations\n    const t = Buffer.alloc( hash_len * steps + info_len + 1 );\n\n    for ( let c = 1, start = 0, end = 0; c <= steps; ++c ) {\n        // add info\n        b_info.copy( t, end );\n        // add counter\n        t[ end + info_len ] = c;\n\n        createHmac( hash, prk )\n            // use view: T(C) = T(C-1) | info | C\n            .update( t.slice( start, end + info_len + 1 ) )\n            .digest()\n            // put back to the same buffer\n            .copy( t, end );\n\n        start = end; // used for T(C-1) start\n        end += hash_len; // used for T(C-1) end & overall end\n    }\n\n    return t.slice( 0, length );\n};\n\n/**\n * HMAC-based Extract-and-Expand Key Derivation Function (HKDF)\n *\n * @param {Buffer|string} ikm - Initial Keying Material\n * @param {integer} length - Required byte length of output\n * @param {Buffer|string} salt='' - Optional salt (recommended)\n * @param {Buffer|string} info='' - Optional context (safe to skip)\n * @param {string} hash='SHA-256' - HMAC hash function to use\n * @returns {Buffer} Raw buffer with derived key of @p length bytes\n */\nfunction hkdf( ikm, length, { salt='', info='', hash='SHA-256' } = {} ) {\n    hash = hash.toLowerCase().replace( '-', '' );\n\n    // 0. Hash length\n    const hash_len = hash_length( hash );\n\n    // 1. extract\n    const prk = hkdf_extract( hash, hash_len, ikm, salt );\n\n    // 2. expand\n    return hkdf_expand( hash, hash_len, prk, length, info );\n}\n\nObject.defineProperties( hkdf, {\n    hash_length : {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: hash_length,\n    },\n    extract : {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: hkdf_extract,\n    },\n    expand : {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: hkdf_expand,\n    },\n} );\n\nmodule.exports = hkdf;\n"]},"metadata":{},"sourceType":"script"}