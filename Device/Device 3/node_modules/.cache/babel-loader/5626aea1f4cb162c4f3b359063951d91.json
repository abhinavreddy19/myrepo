{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar futoin_hkdf_1 = __importDefault(require(\"futoin-hkdf\"));\n\nvar secp256k1_1 = __importDefault(require(\"secp256k1\"));\n\nvar utils_1 = require(\"../utils\");\n\nvar consts_1 = require(\"../consts\");\n\nvar PublicKey =\n/** @class */\nfunction () {\n  function PublicKey(buffer) {\n    this.uncompressed = Buffer.from(secp256k1_1.default.publicKeyConvert(buffer, false));\n    this.compressed = Buffer.from(secp256k1_1.default.publicKeyConvert(buffer, true));\n  }\n\n  PublicKey.fromHex = function (hex) {\n    var decoded = (0, utils_1.decodeHex)(hex);\n\n    if (decoded.length === consts_1.UNCOMPRESSED_PUBLIC_KEY_SIZE - 1) {\n      // eth public key\n      var prefix = Buffer.from([0x04]);\n      var fixed = Buffer.concat([prefix, decoded]);\n      return new PublicKey(fixed);\n    }\n\n    return new PublicKey(decoded);\n  };\n\n  PublicKey.prototype.toHex = function (compressed) {\n    if (compressed === void 0) {\n      compressed = true;\n    }\n\n    if (compressed) {\n      return this.compressed.toString(\"hex\");\n    } else {\n      return this.uncompressed.toString(\"hex\");\n    }\n  };\n\n  PublicKey.prototype.decapsulate = function (priv) {\n    var master = Buffer.concat([this.uncompressed, priv.multiply(this)]);\n    return (0, futoin_hkdf_1.default)(master, 32, {\n      hash: \"SHA-256\"\n    });\n  };\n\n  PublicKey.prototype.equals = function (other) {\n    return this.uncompressed.equals(other.uncompressed);\n  };\n\n  return PublicKey;\n}();\n\nexports.default = PublicKey;","map":{"version":3,"sources":["C:/Users/abhi/Desktop/etherium/endproject/Device/Device 3/node_modules/eciesjs/dist/keys/PublicKey.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","futoin_hkdf_1","require","secp256k1_1","utils_1","consts_1","PublicKey","buffer","uncompressed","Buffer","from","default","publicKeyConvert","compressed","fromHex","hex","decoded","decodeHex","length","UNCOMPRESSED_PUBLIC_KEY_SIZE","prefix","fixed","concat","prototype","toHex","toString","decapsulate","priv","master","multiply","hash","equals","other"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,aAAa,GAAGP,eAAe,CAACQ,OAAO,CAAC,aAAD,CAAR,CAAnC;;AACA,IAAIC,WAAW,GAAGT,eAAe,CAACQ,OAAO,CAAC,WAAD,CAAR,CAAjC;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,UAAD,CAArB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAII,SAAS;AAAG;AAAe,YAAY;AACvC,WAASA,SAAT,CAAmBC,MAAnB,EAA2B;AACvB,SAAKC,YAAL,GAAoBC,MAAM,CAACC,IAAP,CAAYP,WAAW,CAACQ,OAAZ,CAAoBC,gBAApB,CAAqCL,MAArC,EAA6C,KAA7C,CAAZ,CAApB;AACA,SAAKM,UAAL,GAAkBJ,MAAM,CAACC,IAAP,CAAYP,WAAW,CAACQ,OAAZ,CAAoBC,gBAApB,CAAqCL,MAArC,EAA6C,IAA7C,CAAZ,CAAlB;AACH;;AACDD,EAAAA,SAAS,CAACQ,OAAV,GAAoB,UAAUC,GAAV,EAAe;AAC/B,QAAIC,OAAO,GAAG,CAAC,GAAGZ,OAAO,CAACa,SAAZ,EAAuBF,GAAvB,CAAd;;AACA,QAAIC,OAAO,CAACE,MAAR,KAAmBb,QAAQ,CAACc,4BAAT,GAAwC,CAA/D,EAAkE;AAC9D;AACA,UAAIC,MAAM,GAAGX,MAAM,CAACC,IAAP,CAAY,CAAC,IAAD,CAAZ,CAAb;AACA,UAAIW,KAAK,GAAGZ,MAAM,CAACa,MAAP,CAAc,CAACF,MAAD,EAASJ,OAAT,CAAd,CAAZ;AACA,aAAO,IAAIV,SAAJ,CAAce,KAAd,CAAP;AACH;;AACD,WAAO,IAAIf,SAAJ,CAAcU,OAAd,CAAP;AACH,GATD;;AAUAV,EAAAA,SAAS,CAACiB,SAAV,CAAoBC,KAApB,GAA4B,UAAUX,UAAV,EAAsB;AAC9C,QAAIA,UAAU,KAAK,KAAK,CAAxB,EAA2B;AAAEA,MAAAA,UAAU,GAAG,IAAb;AAAoB;;AACjD,QAAIA,UAAJ,EAAgB;AACZ,aAAO,KAAKA,UAAL,CAAgBY,QAAhB,CAAyB,KAAzB,CAAP;AACH,KAFD,MAGK;AACD,aAAO,KAAKjB,YAAL,CAAkBiB,QAAlB,CAA2B,KAA3B,CAAP;AACH;AACJ,GARD;;AASAnB,EAAAA,SAAS,CAACiB,SAAV,CAAoBG,WAApB,GAAkC,UAAUC,IAAV,EAAgB;AAC9C,QAAIC,MAAM,GAAGnB,MAAM,CAACa,MAAP,CAAc,CAAC,KAAKd,YAAN,EAAoBmB,IAAI,CAACE,QAAL,CAAc,IAAd,CAApB,CAAd,CAAb;AACA,WAAO,CAAC,GAAG5B,aAAa,CAACU,OAAlB,EAA2BiB,MAA3B,EAAmC,EAAnC,EAAuC;AAC1CE,MAAAA,IAAI,EAAE;AADoC,KAAvC,CAAP;AAGH,GALD;;AAMAxB,EAAAA,SAAS,CAACiB,SAAV,CAAoBQ,MAApB,GAA6B,UAAUC,KAAV,EAAiB;AAC1C,WAAO,KAAKxB,YAAL,CAAkBuB,MAAlB,CAAyBC,KAAK,CAACxB,YAA/B,CAAP;AACH,GAFD;;AAGA,SAAOF,SAAP;AACH,CAlC8B,EAA/B;;AAmCAP,OAAO,CAACY,OAAR,GAAkBL,SAAlB","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar futoin_hkdf_1 = __importDefault(require(\"futoin-hkdf\"));\nvar secp256k1_1 = __importDefault(require(\"secp256k1\"));\nvar utils_1 = require(\"../utils\");\nvar consts_1 = require(\"../consts\");\nvar PublicKey = /** @class */ (function () {\n    function PublicKey(buffer) {\n        this.uncompressed = Buffer.from(secp256k1_1.default.publicKeyConvert(buffer, false));\n        this.compressed = Buffer.from(secp256k1_1.default.publicKeyConvert(buffer, true));\n    }\n    PublicKey.fromHex = function (hex) {\n        var decoded = (0, utils_1.decodeHex)(hex);\n        if (decoded.length === consts_1.UNCOMPRESSED_PUBLIC_KEY_SIZE - 1) {\n            // eth public key\n            var prefix = Buffer.from([0x04]);\n            var fixed = Buffer.concat([prefix, decoded]);\n            return new PublicKey(fixed);\n        }\n        return new PublicKey(decoded);\n    };\n    PublicKey.prototype.toHex = function (compressed) {\n        if (compressed === void 0) { compressed = true; }\n        if (compressed) {\n            return this.compressed.toString(\"hex\");\n        }\n        else {\n            return this.uncompressed.toString(\"hex\");\n        }\n    };\n    PublicKey.prototype.decapsulate = function (priv) {\n        var master = Buffer.concat([this.uncompressed, priv.multiply(this)]);\n        return (0, futoin_hkdf_1.default)(master, 32, {\n            hash: \"SHA-256\",\n        });\n    };\n    PublicKey.prototype.equals = function (other) {\n        return this.uncompressed.equals(other.uncompressed);\n    };\n    return PublicKey;\n}());\nexports.default = PublicKey;\n"]},"metadata":{},"sourceType":"script"}