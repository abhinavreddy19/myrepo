{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abhi\\\\Desktop\\\\etherium\\\\endproject\\\\Device\\\\Device 1\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport mqtt from 'mqtt';\nimport { useCallback, useEffect, useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport { Container, Row, Col, ListGroup, ListGroupItem, Form } from 'react-bootstrap';\nimport myBackground from './background.jpg';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst elliptic = require('elliptic');\n\nconst sha3 = require('js-sha3');\n\nvar ecies = require(\"eciesjs\");\n\nconst ec = new elliptic.ec('secp256k1');\nvar gateway1_pubKey = '02d3846591c11ef39031b9dd7594de19d2d2f99dd512892e13840b855194432975';\nvar client; //Instance to coimport React, { Component }  from 'react';\n\nvar sendMsg = \"HELLO\";\nvar bogus_priv = \"e6e1031b9eff10cd5b97a2f6a5ffc1d1d42e2ebd3eef6b050b8400259aaf3de1\";\n/*******************UTILITY FUNCTIONS*****************/\n\n/*\n'Encrypt' function receives 2 parameters:\n1. snd - An object\n2. pubK - public key of the receiver\n\nReturns the cipher string\n*/\n\nfunction encrypt(snd, pubK) {\n  //Uses receivers public key to encrypt.\n  let cipher = ecies.encrypt(pubK, Buffer.from(JSON.stringify(snd)));\n  let cipher_str = cipher.toString('hex');\n  return cipher_str;\n}\n/*\n'Decrypt' function receives two parameters:\n1. rcv - Cipher text in the form of buffer.\n2. prvK - Own private key\n\nReturns the decrypted object\n*/\n\n\nfunction decrypt(rcv, prvK) {\n  //Uses own private key to decrypt.\n  let cipher_str = rcv.toString(); // console.log(\"Received - Encrypted message (String): \", cipher_str);\n\n  let cipher = Buffer.from(cipher_str, 'hex'); // console.log(\"Received - Encrypted message (Buffer): \", cipher);\n\n  var rcv_data = ecies.decrypt(prvK, cipher).toString();\n  rcv_data = JSON.parse(rcv_data);\n  return rcv_data;\n}\n/*\n'sign_it' function\nParameters:\n1. prvK - Own private key\n2. Other parameters which are to be concatenated,\nhashed and then signed can be accessed through 'arguments'.\n\n\nReturns the signature object of the form:\n{\n  r:string,\n  s: string,\n  recover paramters: number\n}\n*/\n\n\nfunction sign_it(prvK) {\n  let msg = \"\";\n\n  for (let i = 1; i < arguments.length; i++) msg += arguments[i];\n\n  let msgHash = sha3.keccak256(msg);\n  let signature = ec.sign(msgHash, prvK, \"hex\", {\n    canonical: true\n  }); //The signature below consists of parameters 'r' and 's'.\n\n  let sign_str = JSON.parse(JSON.stringify(signature));\n  return sign_str;\n}\n/**\n'verify' function:\nParameters:\n1. signature - An object same as the type returned by 'sign_it'\n2. pubK - public key to be verified with.\n3. Other parameters which are to be concatenated and hashed can be accessed through 'arguments'.\n\nReturn: Boolean value indicating the authentcation status.\n*/\n\n\nfunction verify(signature, pubK) {\n  let pubKeyObj = ec.keyFromPublic(pubK, \"hex\");\n  let msg = \"\";\n\n  for (let i = 2; i < arguments.length; i++) msg += arguments[i];\n\n  let msgHash = sha3.keccak256(msg);\n  let auth_status = pubKeyObj.verify(msgHash, signature);\n  return auth_status;\n}\n/******************COMPONENT FUNCTION***********************/\n\n\nfunction App() {\n  _s();\n\n  /***************INITILIAZING STATES********************/\n  //Set of keys\n  const [keyPair, setKeyPair] = useState({\n    pubKey: null,\n    privKey: null,\n    privKey_0x: null\n  });\n  const [toggle, setToggle] = useState(false); //This state stores the status of the device.\n\n  const [status, setStatus] = useState({\n    gen: false,\n    //Whether the keys have been generated.\n    start_button_clicked: false,\n    connected: false,\n    registered: false,\n    cur_time_stamp: null\n  });\n  const [regStatus, setReg] = useState({\n    reg_button_clicked: false,\n    req: null,\n    ct: null,\n    res: null\n  });\n  const [authStatus, setAuth] = useState({\n    auth_button_clicked: false,\n    ts1: null,\n    //Timestamp when the device is sending the authentication request\n    ct1: null,\n    //Cipher text when sending the request\n    res1: null,\n    //Nonce as cipher text sent by the gateway as response 1\n    res2: null,\n    //Authentication status as a cipher text as response 2 but not yet used\n    data: null,\n    //Nonce (and receivers public key) received from the gateway\n    data2: null,\n    //Data to be send after receiving the nonce (receiver's public key)\n    ct2: null,\n    // cipher text for data2\n    res: null //Authentication status as a boolean value\n\n  });\n  const [commStatus, setComm] = useState({\n    comm_button_clicked: false,\n    devID: \"\",\n    res: null,\n    //Whole message sent by gateway as cipher text\n    data: null,\n    //Decrypted form of Whole message\n    msg: null\n  });\n  const [buttonStatus, setButton] = useState({\n    keysClicked: false,\n    startClicked: false,\n    registerClicked: false,\n    authClicked: false,\n    data: null\n  }); // const [msg_to_send, setMsg] = useState(\"\");\n\n  useEffect(() => {\n    console.log(\"Key pair changed: \", keyPair);\n  }, [keyPair]);\n  useEffect(() => {\n    console.log(\"Registration status changed: \", status.registered);\n  }, [status.registered]); // useEffect(() => {\n  //   console.log(\"Comm status has been changed: \", commStatus);\n  // }, [commStatus])\n\n  /***************GENERATE KEYS HANDLER********************/\n\n  function handleGenerate() {\n    console.log(\"Generating key pair...\"); //Creating public and private keys for the device.\n\n    var pair = ec.genKeyPair();\n    var priv = pair.getPrivate(\"hex\"); // var priv = \"6b5be97bc9065592a6eb9444f90991ca32659673fb7307a44f6948193e7b44bf\";\n\n    var pub = ec.keyFromPrivate(priv).getPublic(true, \"hex\"); // var pub = \"0206fe0109380bb9fb59cfaf24c7db9626a9bed8d1ae3c89e50d2f7671e81ee023\";\n\n    var priv_0x = \"0x\" + priv;\n    var Id = sha3.keccak256(pub + gateway1_pubKey);\n    setKeyPair({\n      pubKey: pub,\n      privKey: priv,\n      privKey_0x: priv_0x,\n      devId: Id\n    });\n    setStatus(prev => ({ ...prev,\n      gen: true\n    }));\n    let dat = new Date(\"2000-01-01\");\n    localStorage.setItem('cur_time_stamp', dat.toString());\n    localStorage.setItem('old', false);\n    localStorage.setItem('gate', true);\n  }\n  /***************CONNECTING AND SUBSCRIBING TO MQTT AND MAIN LOGIC FOR RECEIVING MESSAGES AND REPSONDING********************/\n\n  /***** This handler connects the device to the broker and subscribes to listen for responses *****/\n  // function respond_nonce(){\n  //   console.log(\"Wait...\");\n  // }\n\n\n  function handleStart() {\n    console.log(\"Device start button clicked...\");\n    setStatus(prev => ({ ...prev,\n      start_button_clicked: true\n    }));\n    client = mqtt.connect('mqtt://test.mosquitto.org:8081', {\n      protocol: 'mqtts'\n    });\n    client.on('connect', () => {\n      /***************SUBSCRIBE TO DEVICE-ID********************/\n      client.subscribe(keyPair.devId, function (err) {\n        if (!err) {\n          console.log(\"Device started...\");\n          setStatus(prev => ({ ...prev,\n            connected: true\n          }));\n        } else {\n          console.log(\"Error starting the device...\");\n        }\n      });\n      /**********MESSAGE LISTENERS**************/\n\n      client.on('message', (topic, rcv) => {\n        if (topic !== keyPair.devId) return;\n        var data = decrypt(rcv, keyPair.privKey_0x);\n        console.log(\"Gateway response received: \", data); // console.log(\"Current time stamp: \", localStorage.getItem('cur_time_stamp'));\n\n        /***********REGISTRATION LISTENER***********/\n\n        if (data.remark === \"register\") {\n          if (data.status) {\n            console.log(\"Device has been registered...Proceed for authentication!!\");\n            setStatus(prev => ({ ...prev,\n              registered: true\n            }));\n            setReg(prev => ({ ...prev,\n              res: true\n            }));\n          } else {\n            console.log(\"Error registering the device...\");\n          }\n        }\n        /***********NONCE LISTENER***********/\n        else if (data.remark === \"nonce\") {\n            if (!data.status) {\n              console.log(\"Device not registered...\");\n              return;\n            }\n\n            if (data.recvKey) localStorage.setItem('recvKey', data.recvKey);\n            setAuth(prev => ({ ...prev,\n              res1: rcv.toString(),\n              data: data\n            })); //We have received the nonce (and receivers public key)\n            //1. Check whether the timestamp is new.\n            //2. Check the gateway\n            //3. Hash the contents and sign it\n            //4. Encrypt with gateways public key and send.\n\n            let d1 = new Date(data.time_stamp);\n            let d2 = new Date(localStorage.getItem('cur_time_stamp')); // console.log(\"d1: \", d1.toString(), \"\\nd2: \", d2.toString());\n            // 1.\n            // !status.cur_time_stamp\n\n            if (d1.getTime() > d2.getTime()) {\n              //2.\n              let pubKeyObj = ec.keyFromPublic(gateway1_pubKey, \"hex\");\n              let msgHash = sha3.keccak256(data.time_stamp); // console.log(\"Message hash: \", msgHash);\n\n              let auth_status = pubKeyObj.verify(msgHash, data.sign);\n\n              if (auth_status) {\n                //3.\n                // console.log(\"The text message and receiver public key just before sending: \", localStorage.getItem('msg'), \" \", localStorage.getItem('recvKey'));\n                //export NODE_OPTIONS=--openssl-legacy-provider\n                let recvKey = localStorage.getItem('recvKey');\n                let msg = localStorage.getItem('msg').length === 0 ? \"\" : encrypt(localStorage.getItem('msg'), recvKey); // bogus_priv\n\n                let sign = sign_it(keyPair.privKey, data.nonce);\n                let snd = {\n                  devId: keyPair.devId,\n                  sign: sign,\n                  msg: msg\n                };\n                console.log(\"Sending the message: \", snd);\n                let enc_data = encrypt(snd, gateway1_pubKey);\n                client.publish('gateway1/auth', enc_data); //Update the timestamp state.\n                // setStatus((prev) => ({\n                //   ...prev,\n                //   cur_time_stamp:data.time_stamp\n                // }))\n\n                setAuth(prev => ({ ...prev,\n                  data2: snd,\n                  ct2: enc_data\n                })); // localStorage.setItem('old', false);\n\n                localStorage.setItem('gate', true);\n                localStorage.setItem('cur_time_stamp', data.time_stamp); // console.log(\"Current time stamp now: \", localStorage.getItem('cur_time_stamp'));\n              } else {\n                console.log(\"Gateway signature verification failed...\");\n                setAuth(prev => ({ ...prev,\n                  data2: null,\n                  ct2: null\n                }));\n                localStorage.setItem('gate', false);\n              }\n            } else {\n              console.log(\"Timestamp is old: \");\n              console.log(\"Latest timestamp stored: \", localStorage.getItem('cur_time_stamp'));\n              console.log(\"Received time stamp: \", data.time_stamp);\n              setAuth(prev => ({ ...prev,\n                data2: null,\n                ct2: null\n              })); // localStorage.setItem('old', true);\n\n              localStorage.setItem('gate', false);\n            }\n          }\n          /***********AUTH LISTENER***********/\n          else if (data.remark === \"auth\") {\n              //This is the response from the gateway after processing the request.\n              //1. Check gateway.\n              //2. Check status.\n              let d1 = new Date(data.time_stamp);\n              let d2 = new Date(status.cur_time_stamp);\n\n              if (!status.cur_time_stamp || d1.getTime() > d2.getTime()) {\n                let pubKeyObj = ec.keyFromPublic(gateway1_pubKey, \"hex\");\n                let msgHash = sha3.keccak256(data.time_stamp);\n                let auth_status = pubKeyObj.verify(msgHash, data.sign);\n\n                if (auth_status) {\n                  setAuth(prev => ({ ...prev,\n                    res: data.status\n                  }));\n                  console.log(\"Auth status received: \", data.status);\n                } else console.log(\"Gateway signature verification failed...\");\n              } else console.log(\"Timestamp is old...\");\n            } else if (data.remark === \"message\") {\n              let d1 = new Date(data.time_stamp);\n              let d2 = new Date(status.cur_time_stamp);\n              console.log(\"Received a message: \", data.msg);\n\n              if (d1.getTime() > d2.getTime()) {\n                let auth_status = verify(data.sign, gateway1_pubKey, data.time_stamp);\n\n                if (auth_status) {\n                  setStatus(prev => ({ ...prev,\n                    cur_time_stamp: data.time_stamp\n                  }));\n                  setComm(prev => ({ ...commStatus,\n                    res: rcv.toString(),\n                    data: data,\n                    enc: data.msg,\n                    msg: decrypt(data.msg, keyPair.privKey_0x)\n                  }));\n                } else {\n                  console.log(\"Cannot verify gateway signature...\");\n                }\n              } else {\n                console.log(\"Timestamp is old...\");\n              }\n            }\n      });\n    });\n  }\n  /***************DEVICE REGISTRATION HANDLER********************/\n\n\n  function handleRegister() {\n    console.log(\"Requesting registration...\"); //The devID, PubKey encrypted with gateway public key is sent to the gateway on the topic register1.\n\n    let d = new Date();\n    let d_str = d.toString();\n    let sign = sign_it(keyPair.privKey, d_str);\n    let data = {\n      devId: keyPair.devId,\n      pubKey: keyPair.pubKey,\n      TS: d_str,\n      sign: sign\n    };\n    let cipher = ecies.encrypt(gateway1_pubKey, Buffer.from(JSON.stringify(data)));\n    let cipher_str = cipher.toString('hex');\n    setReg(prev => ({ ...prev,\n      reg_button_clicked: true,\n      req: data,\n      ct: cipher_str\n    }));\n    client.publish('gateway1/register', cipher_str);\n  }\n  /***************DEVCE AUTHENTICATION HANDLER********************/\n\n\n  function handleAuth() {\n    //Here the device requests the gateway for authentication.\n    //The gateway responds by sending a nonce.\n    console.log(\"Requesting nonce for authentication...\");\n    setAuth(prev => ({ ...prev,\n      auth_button_clicked: commStatus.devID.length === 0\n    }));\n    setComm(prev => ({ ...prev,\n      comm_button_clicked: commStatus.devID.length !== 0\n    }));\n    let d = new Date();\n    let d_str = d.toString();\n    let data = {\n      devId: keyPair.devId,\n      TS: d_str,\n      recvId: commStatus.devID.length !== 0 ? commStatus.devID : null\n    };\n    let cipher = ecies.encrypt(gateway1_pubKey, Buffer.from(JSON.stringify(data)));\n    let cipher_str = cipher.toString('hex');\n    setAuth(prev => ({ ...prev,\n      ts1: d_str,\n      ct1: cipher_str\n    }));\n    client.publish('gateway1/nonce', cipher_str);\n  }\n\n  function onDevId(e) {\n    setComm(prev => ({ ...prev,\n      devID: e.target.value\n    }));\n  }\n\n  function onMsg(e) {\n    // setMsg((prev) => (e.target.value));\n    localStorage.setItem('msg', e.target.value);\n  }\n\n  const [showCard, setShoward] = useState(\"\");\n  /************************COMPONENT TO BE RENDERED*****************************/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      backgroundImage: 'url($(myBackground))'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"page-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"  \", /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: \"BGP Device\"\n        }, void 0, false), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"containers\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \".float-child-1\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"buttons\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            className: \"button\",\n            id: \"button1\",\n            onClick: handleGenerate,\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"front\",\n              children: \" Keys \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 85\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"button\",\n            id: \"button2\",\n            onClick: handleStart,\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"front\",\n              children: \"Start the device \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 508,\n              columnNumber: 82\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"button\",\n            id: \"button3\",\n            onClick: handleRegister,\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"front\",\n              children: \" Register \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 84\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 509,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"button\",\n            id: \"button4\",\n            onClick: handleAuth,\n            disabled: false,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"front\",\n              children: \"Authenticate \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 95\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \".float-child-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"cards\",\n          children: [keyPair.privKey ? /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"card1\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Keys\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 518,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Device Id: \", keyPair.devId]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 520,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Public key: \", keyPair.pubKey]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 521,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Private key: \", keyPair.privKey]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 522,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 9\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: console.log(\"Key pair not generated...\")\n          }, void 0, false), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 7\n          }, this), status.start_button_clicked ? /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"card1\",\n            children: !status.connected ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Connecting to broker...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 14\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Device ready!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 14\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 9\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 7\n          }, this), regStatus.reg_button_clicked ? /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"card1\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Requesting registration...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 549,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"card2\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: \"Device to gateway\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 551,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Device ID: \", keyPair.devId]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 552,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Public key: \", keyPair.pubKey]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 553,\n                columnNumber: 13\n              }, this), regStatus.req ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Timestamp of the request: \", regStatus.req.TS]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 557,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Signature (r, s): ( r: \", regStatus.req.sign.r.substring(0, 40), \", s: \", regStatus.req.sign.s.substring(0, 40), \" )\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 558,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 556,\n                columnNumber: 15\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Signing...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 561,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Encrypted request: \", regStatus.ct ? regStatus.ct.substring(0, 40) + \"...\" : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 563,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 550,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"card2\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: \"Gateway to device\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 567,\n                columnNumber: 13\n              }, this), status.registered ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Registration status: TRUE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 568,\n                columnNumber: 35\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Registration status: FALSE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 568,\n                columnNumber: 69\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 566,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 9\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 7\n          }, this), authStatus.auth_button_clicked ? /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"card1\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Starting authentication process\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 581,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"card2\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: \"Request from device to gateway\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 583,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Device ID: \", keyPair.devId]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 584,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Timestamp of the request: \", authStatus.ts1 ? authStatus.ts1 : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 585,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Cipher text: \", authStatus.ct1 ? authStatus.ct1.substring(0, 40) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 586,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 582,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"card2\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: \"Gateway response\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 590,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Received cipher text: \", authStatus.res1 ? authStatus.res1.substring(0, 40) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: \"Waiting...\"\n                  }, void 0, false)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 593,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"After decrypting: \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 594,\n                  columnNumber: 19\n                }, this), authStatus.data ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Timestamp of the response: \", authStatus.data.time_stamp]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 598,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Signature (r, s): ( r: \", authStatus.data.sign.r.substring(0, 40), \", s: \", authStatus.data.sign.s.substring(0, 40), \" )\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 599,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Nonce received: \", authStatus.data.nonce]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 600,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 597,\n                  columnNumber: 21\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Waiting...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 602,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 592,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 589,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"card2\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: \"Device sending signed and encrypted nonce\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 610,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Device ID: \", keyPair.devId]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 611,\n                columnNumber: 13\n              }, this), authStatus.data2 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Signing the nonce: \", authStatus.data.nonce]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 615,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Device signature(r, s): ( r: \", authStatus.data2.sign.r.substring(0, 40), \", s: \", authStatus.data2.sign.s.substring(0, 40), \" )\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 616,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 614,\n                columnNumber: 15\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Preparing response\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 618,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Cipher text: \", authStatus.ct2 ? authStatus.ct2.substring(0, 40) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 620,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 609,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"card2\",\n              children: authStatus.res ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Authentication successful!!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 624,\n                columnNumber: 32\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Authentication failed...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 624,\n                columnNumber: 68\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 623,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 579,\n            columnNumber: 9\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 7\n        }, this), commStatus.comm_button_clicked ? /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card1\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Starting authenticated communication process\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 663,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"card2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Request from device to gateway\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 666,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Device ID: \", keyPair.devId]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 667,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Timestamp of the request: \", authStatus.ts1 ? authStatus.ts1 : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 668,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Receiver's device id: \", commStatus.devID ? commStatus.devID : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 669,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Cipher text: \", authStatus.ct1 ? authStatus.ct1.substring(0, 40) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 670,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 665,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"card2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Gateway response\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 674,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Received cipher text: \", authStatus.res1 ? authStatus.res1.substring(0, 40) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: \"Waiting...\"\n              }, void 0, false)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 675,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"After decrypting: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 676,\n              columnNumber: 13\n            }, this), authStatus.data ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Timestamp of the response: \", authStatus.data.time_stamp]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 680,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Signature (r, s): ( r: \", authStatus.data.sign.r.substring(0, 40), \", s: \", authStatus.data.sign.s.substring(0, 40), \" )\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 681,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Nonce received: \", authStatus.data.nonce]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 682,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Receiver public key: \", authStatus.data.recvKey]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 683,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 679,\n              columnNumber: 15\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Waiting...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 685,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 673,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"card2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Device sending encrypted message with signed nonce\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 690,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Device ID: \", keyPair.devId]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 691,\n              columnNumber: 13\n            }, this), authStatus.data && authStatus.data2 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Nonce to be signed: \", authStatus.data.nonce]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 695,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Recipient public key: \", authStatus.data.recvKey]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 696,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Sending sample text message: \", authStatus.data2.msg.substring(0, 40) + \"...\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 697,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Device signature(r, s): ( r: \", authStatus.data2.sign.r.substring(0, 40), \", s: \", authStatus.data2.sign.s.substring(0, 40), \" )\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 698,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 694,\n              columnNumber: 15\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Preparing response\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 700,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Cipher text: \", authStatus.ct2 ? authStatus.ct2.substring(0, 40) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 702,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: '#d9f2de'\n            },\n            children: authStatus.res ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Message sent!!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 706,\n              columnNumber: 30\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Sending failed...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 706,\n              columnNumber: 53\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 705,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 9\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 499,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"o1NMvcgBfceQBZORMXBEj7iXPTc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/abhi/Desktop/etherium/endproject/Device/Device 1/src/App.js"],"names":["React","Component","mqtt","useCallback","useEffect","useState","Button","Container","Row","Col","ListGroup","ListGroupItem","Form","myBackground","elliptic","require","sha3","ecies","ec","gateway1_pubKey","client","sendMsg","bogus_priv","encrypt","snd","pubK","cipher","Buffer","from","JSON","stringify","cipher_str","toString","decrypt","rcv","prvK","rcv_data","parse","sign_it","msg","i","arguments","length","msgHash","keccak256","signature","sign","canonical","sign_str","verify","pubKeyObj","keyFromPublic","auth_status","App","keyPair","setKeyPair","pubKey","privKey","privKey_0x","toggle","setToggle","status","setStatus","gen","start_button_clicked","connected","registered","cur_time_stamp","regStatus","setReg","reg_button_clicked","req","ct","res","authStatus","setAuth","auth_button_clicked","ts1","ct1","res1","res2","data","data2","ct2","commStatus","setComm","comm_button_clicked","devID","buttonStatus","setButton","keysClicked","startClicked","registerClicked","authClicked","console","log","handleGenerate","pair","genKeyPair","priv","getPrivate","pub","keyFromPrivate","getPublic","priv_0x","Id","devId","prev","dat","Date","localStorage","setItem","handleStart","connect","protocol","on","subscribe","err","topic","remark","recvKey","d1","time_stamp","d2","getItem","getTime","nonce","enc_data","publish","enc","handleRegister","d","d_str","TS","handleAuth","recvId","onDevId","e","target","value","onMsg","showCard","setShoward","backgroundImage","r","substring","s","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component}  from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport mqtt from 'mqtt';\nimport {useCallback, useEffect, useState} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport {Container, Row, Col, ListGroup, ListGroupItem, Form} from 'react-bootstrap';\nimport myBackground from './background.jpg'\n\n\nconst elliptic = require('elliptic');\nconst sha3 = require('js-sha3');\nvar ecies = require(\"eciesjs\");\nconst ec = new elliptic.ec('secp256k1');\nvar gateway1_pubKey = '02d3846591c11ef39031b9dd7594de19d2d2f99dd512892e13840b855194432975';\nvar client; //Instance to coimport React, { Component }  from 'react';\nvar sendMsg = \"HELLO\";\nvar bogus_priv = \"e6e1031b9eff10cd5b97a2f6a5ffc1d1d42e2ebd3eef6b050b8400259aaf3de1\";\n\n/*******************UTILITY FUNCTIONS*****************/\n/*\n'Encrypt' function receives 2 parameters:\n1. snd - An object\n2. pubK - public key of the receiver\n\nReturns the cipher string\n*/\nfunction encrypt(snd, pubK){\n  //Uses receivers public key to encrypt.\n  let cipher = ecies.encrypt(pubK, Buffer.from(JSON.stringify(snd)));\n  let cipher_str = cipher.toString('hex');\n  return cipher_str;\n}\n\n/*\n'Decrypt' function receives two parameters:\n1. rcv - Cipher text in the form of buffer.\n2. prvK - Own private key\n\nReturns the decrypted object\n*/\nfunction decrypt(rcv, prvK){\n  //Uses own private key to decrypt.\n  let cipher_str = rcv.toString();\n  // console.log(\"Received - Encrypted message (String): \", cipher_str);\n  let cipher = Buffer.from(cipher_str,'hex');\n  // console.log(\"Received - Encrypted message (Buffer): \", cipher);\n  var rcv_data = ecies.decrypt(prvK, cipher).toString();\n  rcv_data = JSON.parse(rcv_data);\n  return rcv_data;\n}\n\n/*\n'sign_it' function\nParameters:\n1. prvK - Own private key\n2. Other parameters which are to be concatenated,\nhashed and then signed can be accessed through 'arguments'.\n\n\nReturns the signature object of the form:\n{\n  r:string,\n  s: string,\n  recover paramters: number\n}\n*/\n\nfunction sign_it(prvK){\n  let msg =  \"\";\n  for (let i=1;i<arguments.length;i++)\n    msg += arguments[i];\n  let msgHash = sha3.keccak256(msg);\n  let signature = ec.sign(msgHash, prvK, \"hex\", {canonical: true});\n\n  //The signature below consists of parameters 'r' and 's'.\n  let sign_str = JSON.parse(JSON.stringify(signature));\n  return sign_str;\n}\n\n/**\n'verify' function:\nParameters:\n1. signature - An object same as the type returned by 'sign_it'\n2. pubK - public key to be verified with.\n3. Other parameters which are to be concatenated and hashed can be accessed through 'arguments'.\n\nReturn: Boolean value indicating the authentcation status.\n*/\nfunction verify(signature, pubK){\n  let pubKeyObj = ec.keyFromPublic(pubK,\"hex\");\n\n  let msg =  \"\";\n  for (let i=2;i<arguments.length;i++)\n    msg += arguments[i];\n  let msgHash = sha3.keccak256(msg);\n\n  let auth_status = pubKeyObj.verify(msgHash, signature);\n\n  return auth_status;\n}\n/******************COMPONENT FUNCTION***********************/\nfunction App() {\n\n  /***************INITILIAZING STATES********************/\n  //Set of keys\n  const [keyPair, setKeyPair] = useState({\n    pubKey: null,\n    privKey: null,\n    privKey_0x: null\n  })\n\n  const [toggle, setToggle] = useState(false);\n\n  //This state stores the status of the device.\n  const [status, setStatus] = useState({\n    gen: false, //Whether the keys have been generated.\n    start_button_clicked: false,\n    connected: false,\n    registered: false,\n    cur_time_stamp: null\n  });\n\n  const [regStatus, setReg] = useState({\n    reg_button_clicked: false,\n    req: null,\n    ct: null,\n    res: null\n  })\n\n  const [authStatus, setAuth] = useState({\n    auth_button_clicked: false,\n    ts1:null, //Timestamp when the device is sending the authentication request\n    ct1:null, //Cipher text when sending the request\n    res1: null, //Nonce as cipher text sent by the gateway as response 1\n    res2:null, //Authentication status as a cipher text as response 2 but not yet used\n    data: null, //Nonce (and receivers public key) received from the gateway\n    data2: null, //Data to be send after receiving the nonce (receiver's public key)\n    ct2: null, // cipher text for data2\n    res:null //Authentication status as a boolean value\n  })\n\n\n  const [commStatus, setComm] = useState({\n    comm_button_clicked: false,\n    devID: \"\",\n    res: null, //Whole message sent by gateway as cipher text\n    data: null,  //Decrypted form of Whole message\n    msg: null\n  })\n\n\n  const [buttonStatus, setButton] = useState({\n    keysClicked: false,\n    startClicked: false,\n    registerClicked: false,\n    authClicked: false,\n    data: null\n  })\n\n  // const [msg_to_send, setMsg] = useState(\"\");\n\n  useEffect(() => {\n      console.log(\"Key pair changed: \", keyPair);\n  }, [keyPair])\n\n  useEffect(() => {\n    console.log(\"Registration status changed: \", status.registered);\n}, [status.registered])\n\n  // useEffect(() => {\n  //   console.log(\"Comm status has been changed: \", commStatus);\n  // }, [commStatus])\n\n  /***************GENERATE KEYS HANDLER********************/\n  function handleGenerate(){\n    console.log(\"Generating key pair...\");\n\n    //Creating public and private keys for the device.\n    var pair = ec.genKeyPair();\n    var priv = pair.getPrivate(\"hex\");\n    // var priv = \"6b5be97bc9065592a6eb9444f90991ca32659673fb7307a44f6948193e7b44bf\";\n    var pub = ec.keyFromPrivate(priv).getPublic(true,\"hex\");\n    // var pub = \"0206fe0109380bb9fb59cfaf24c7db9626a9bed8d1ae3c89e50d2f7671e81ee023\";\n\n    var priv_0x = \"0x\" + priv;\n    var Id = sha3.keccak256(pub+gateway1_pubKey);\n\n    setKeyPair({\n      pubKey: pub,\n      privKey: priv,\n      privKey_0x: priv_0x,\n      devId: Id\n    })\n\n    setStatus((prev) => ({\n      ...prev,\n      gen: true\n    }));\n    let dat = new Date(\"2000-01-01\");\n    localStorage.setItem('cur_time_stamp', dat.toString());\n    localStorage.setItem('old', false);\n    localStorage.setItem('gate', true);\n  }\n\n  /***************CONNECTING AND SUBSCRIBING TO MQTT AND MAIN LOGIC FOR RECEIVING MESSAGES AND REPSONDING********************/\n\n  /***** This handler connects the device to the broker and subscribes to listen for responses *****/\n\n  // function respond_nonce(){\n  //   console.log(\"Wait...\");\n  // }\n\n  function handleStart(){\n    console.log(\"Device start button clicked...\");\n    setStatus((prev) => ({\n      ...prev,\n      start_button_clicked: true\n    }))\n    client = mqtt.connect('mqtt://test.mosquitto.org:8081', {protocol: 'mqtts'});\n    client.on('connect', () => {\n\n      /***************SUBSCRIBE TO DEVICE-ID********************/\n      client.subscribe(keyPair.devId, function (err) {\n        if (!err) {\n          console.log(\"Device started...\");\n          setStatus((prev) => ({\n            ...prev,\n            connected: true\n          }))\n        }\n        else{\n          console.log(\"Error starting the device...\");\n        }\n      });\n\n      /**********MESSAGE LISTENERS**************/\n      client.on('message', (topic, rcv) => {\n          if(topic !== keyPair.devId)\n            return;\n\n          var data = decrypt(rcv, keyPair.privKey_0x);\n          console.log(\"Gateway response received: \", data);\n          // console.log(\"Current time stamp: \", localStorage.getItem('cur_time_stamp'));\n\n          /***********REGISTRATION LISTENER***********/\n          if(data.remark === \"register\")\n          {\n            if(data.status)\n            {\n              console.log(\"Device has been registered...Proceed for authentication!!\");\n              setStatus((prev) => ({\n                ...prev,\n                registered: true\n              }))\n              setReg((prev) => ({\n                ...prev,\n                res: true\n              }))\n            }\n            else\n            {\n              console.log(\"Error registering the device...\");\n            }\n          }\n\n          /***********NONCE LISTENER***********/\n          else if(data.remark === \"nonce\")\n          {\n            if(!data.status)\n            {\n              console.log(\"Device not registered...\");\n              return;\n            }\n            if(data.recvKey)\n              localStorage.setItem('recvKey', data.recvKey);\n            setAuth((prev) => ({\n              ...prev,\n              res1: rcv.toString(),\n              data: data\n            }))\n\n\n            //We have received the nonce (and receivers public key)\n            //1. Check whether the timestamp is new.\n            //2. Check the gateway\n            //3. Hash the contents and sign it\n            //4. Encrypt with gateways public key and send.\n            let d1 = new Date(data.time_stamp);\n            let d2 = new Date(localStorage.getItem('cur_time_stamp'));\n\n            // console.log(\"d1: \", d1.toString(), \"\\nd2: \", d2.toString());\n\n            // 1.\n            // !status.cur_time_stamp\n            if(d1.getTime() > d2.getTime())\n            {\n              //2.\n              let pubKeyObj = ec.keyFromPublic(gateway1_pubKey,\"hex\");\n              let msgHash = sha3.keccak256(data.time_stamp);\n              // console.log(\"Message hash: \", msgHash);\n              let auth_status = pubKeyObj.verify(msgHash, data.sign);\n\n              if(auth_status)\n              {\n                //3.\n                // console.log(\"The text message and receiver public key just before sending: \", localStorage.getItem('msg'), \" \", localStorage.getItem('recvKey'));\n                //export NODE_OPTIONS=--openssl-legacy-provider\n                let recvKey = localStorage.getItem('recvKey');\n                let msg = (localStorage.getItem('msg').length === 0) ? \"\" : encrypt(localStorage.getItem('msg'), recvKey);\n                // bogus_priv\n                let sign = sign_it(keyPair.privKey, data.nonce);\n                let snd = {\n                devId: keyPair.devId,\n                sign: sign,\n                msg:  msg,\n                }\n                console.log(\"Sending the message: \", snd);\n                let enc_data = encrypt(snd, gateway1_pubKey);\n                client.publish('gateway1/auth', enc_data);\n\n                //Update the timestamp state.\n                // setStatus((prev) => ({\n                //   ...prev,\n                //   cur_time_stamp:data.time_stamp\n                // }))\n                setAuth((prev) => ({\n                  ...prev,\n                  data2: snd,\n                  ct2: enc_data,\n                }))\n                // localStorage.setItem('old', false);\n                localStorage.setItem('gate', true);\n                localStorage.setItem('cur_time_stamp', data.time_stamp);\n                // console.log(\"Current time stamp now: \", localStorage.getItem('cur_time_stamp'));\n              }\n              else\n              {\n                console.log(\"Gateway signature verification failed...\");\n                setAuth((prev) => ({\n                  ...prev,\n                  data2: null,\n                  ct2: null\n                }))\n                localStorage.setItem('gate', false);\n              }\n            }\n            else\n              {\n                console.log(\"Timestamp is old: \");\n                console.log(\"Latest timestamp stored: \", localStorage.getItem('cur_time_stamp'));\n                console.log(\"Received time stamp: \", data.time_stamp);\n                setAuth((prev) => ({\n                  ...prev,\n                  data2: null,\n                  ct2: null\n                }))\n                // localStorage.setItem('old', true);\n                localStorage.setItem('gate', false);\n              }\n\n          }\n\n          /***********AUTH LISTENER***********/\n          else if(data.remark === \"auth\")\n          {\n            //This is the response from the gateway after processing the request.\n            //1. Check gateway.\n            //2. Check status.\n            let d1 = new Date(data.time_stamp);\n            let d2 = new Date(status.cur_time_stamp);\n            if(!status.cur_time_stamp || d1.getTime() > d2.getTime())\n            {\n              let pubKeyObj = ec.keyFromPublic(gateway1_pubKey,\"hex\");\n              let msgHash = sha3.keccak256(data.time_stamp);\n              let auth_status = pubKeyObj.verify(msgHash, data.sign);\n              if(auth_status){\n                setAuth((prev) => ({\n                  ...prev,\n                  res:data.status\n                }))\n                console.log(\"Auth status received: \", data.status);\n              }\n              else\n                console.log(\"Gateway signature verification failed...\");\n            }\n            else\n              console.log(\"Timestamp is old...\");\n          }\n          else if(data.remark === \"message\")\n          {\n            let d1 = new Date(data.time_stamp);\n            let d2 = new Date(status.cur_time_stamp);\n            console.log(\"Received a message: \", data.msg);\n            if(d1.getTime() > d2.getTime()){\n              let auth_status = verify(data.sign, gateway1_pubKey, data.time_stamp);\n\n              if(auth_status){\n                setStatus((prev) => ({\n                  ...prev,\n                  cur_time_stamp:data.time_stamp\n                }))\n                setComm((prev) => ({\n                  ...commStatus,\n                  res: rcv.toString(),\n                  data: data,\n                  enc: data.msg,\n                  msg: decrypt(data.msg, keyPair.privKey_0x)\n\n                }))\n              }\n              else{\n                console.log(\"Cannot verify gateway signature...\");\n              }\n\n            }\n            else{\n              console.log(\"Timestamp is old...\");\n            }\n\n          }\n      })\n    });\n  }\n\n\n  /***************DEVICE REGISTRATION HANDLER********************/\n  function handleRegister() {\n    console.log(\"Requesting registration...\");\n    //The devID, PubKey encrypted with gateway public key is sent to the gateway on the topic register1.\n    let d = new Date();\n    let d_str = d.toString();\n    let sign = sign_it(keyPair.privKey, d_str);\n    let data = {\n      devId: keyPair.devId,\n      pubKey: keyPair.pubKey,\n      TS: d_str,\n      sign: sign\n    }\n    let cipher = ecies.encrypt(gateway1_pubKey, Buffer.from(JSON.stringify(data)));\n    let cipher_str = cipher.toString('hex');\n    setReg((prev) => ({\n      ...prev,\n      reg_button_clicked: true,\n      req: data,\n      ct: cipher_str\n    }))\n    client.publish('gateway1/register', cipher_str);\n  }\n\n\n  /***************DEVCE AUTHENTICATION HANDLER********************/\n  function handleAuth(){\n    //Here the device requests the gateway for authentication.\n    //The gateway responds by sending a nonce.\n    console.log(\"Requesting nonce for authentication...\");\n    setAuth((prev) => ({\n      ...prev,\n      auth_button_clicked: (commStatus.devID.length === 0)\n    }))\n    setComm((prev) => ({\n      ...prev,\n      comm_button_clicked: (commStatus.devID.length !== 0)\n    }))\n    let d = new Date();\n    let d_str = d.toString();\n    let data = {\n      devId: keyPair.devId,\n      TS: d_str,\n      recvId: (commStatus.devID.length !== 0) ? commStatus.devID: null\n    }\n    let cipher = ecies.encrypt(gateway1_pubKey, Buffer.from(JSON.stringify(data)));\n    let cipher_str = cipher.toString('hex');\n\n    setAuth((prev) => ({\n      ...prev,\n      ts1: d_str,\n      ct1:cipher_str\n    }))\n    client.publish('gateway1/nonce', cipher_str);\n  }\n\n\n  function onDevId(e) {\n    setComm((prev) => ({\n      ...prev,\n      devID: e.target.value\n    }))\n  }\n\n  function onMsg(e) {\n    // setMsg((prev) => (e.target.value));\n    localStorage.setItem('msg', e.target.value);\n  }\n  const [showCard,setShoward] = useState(\"\")\n  /************************COMPONENT TO BE RENDERED*****************************/\n  return (\n    <div className=\"App\" style = {{backgroundImage: 'url($(myBackground))'}}>\n      <div class = \"page-header\">\n        <h1>  <>BGP Device</> </h1>\n      </div>\n      <br></br>\n      <div class = \"containers\">\n        <div class=\".float-child-1\">\n            <div class = \"buttons\">\n            <Button className = \"button\" id = \"button1\" onClick = {handleGenerate}> <span class=\"front\"> Keys </span> </Button>\n            <Button className = \"button\" id = \"button2\"  onClick={handleStart} > <span class=\"front\">Start the device </span></Button>\n            <Button className = \"button\" id = \"button3\" onClick={handleRegister} > <span class=\"front\"> Register </span> </Button>\n            <Button className = \"button\" id = \"button4\" onClick={handleAuth} disabled={false}><span class=\"front\">Authenticate </span></Button>\n            </div>\n        </div>\n      <div class=\".float-child-1\">\n      <div class = \"cards\">\n      {(keyPair.privKey) ?\n      (\n        <div class = \"card1\">\n          <h3>Keys</h3>\n\n          <p>Device Id: {keyPair.devId}</p>\n          <p>Public key: {keyPair.pubKey}</p>\n          <p>Private key: {keyPair.privKey}</p>\n        </div>\n      ) :\n      <>\n        {console.log(\"Key pair not generated...\")}\n      </>\n      }\n      <br></br>\n\n\n      { (status.start_button_clicked) ?\n        <div class = \"card1\">\n\n          {(!status.connected) ?\n            (<p>Connecting to broker...</p>)\n          : (<p>Device ready!</p>)\n          }\n\n        </div>\n        : null\n      }\n\n      <br></br>\n\n      { (regStatus.reg_button_clicked) ?\n        <div class = \"card1\">\n\n          <p>Requesting registration...</p>\n          <div class = \"card2\">\n            <h5>Device to gateway</h5>\n            <p>Device ID: {keyPair.devId}</p>\n            <p>Public key: {keyPair.pubKey}</p>\n            {\n              (regStatus.req) ?\n              <div>\n                <p>Timestamp of the request: {regStatus.req.TS}</p>\n                <p>Signature (r, s): ( r: {regStatus.req.sign.r.substring(0,40)}, s: {regStatus.req.sign.s.substring(0,40)} )</p>\n              </div>\n              :\n              <p>Signing...</p>\n            }\n            <p>Encrypted request: {(regStatus.ct) ? regStatus.ct.substring(0,40)+\"...\" : null}</p>\n          </div>\n\n          <div class = \"card2\">\n            <h5>Gateway to device</h5>\n            {(status.registered)? <p>Registration status: TRUE</p> :<p>Registration status: FALSE</p> }\n          </div>\n\n        </div>\n        : null\n      }\n\n      <br></br>\n\n\n      { (authStatus.auth_button_clicked) ?\n        <div class = \"card1\">\n\n            <p>Starting authentication process</p>\n            <div class = \"card2\">\n              <h5>Request from device to gateway</h5>\n              <p>Device ID: {keyPair.devId}</p>\n              <p>Timestamp of the request: {(authStatus.ts1) ? authStatus.ts1 : null}</p>\n              <p>Cipher text: {(authStatus.ct1) ? authStatus.ct1.substring(0,40) : null}</p>\n            </div>\n\n            <div class = \"card2\">\n              <h5>Gateway response</h5>\n              {\n                  <div>\n                  <p>Received cipher text: {(authStatus.res1) ? authStatus.res1.substring(0,40) : <>Waiting...</>}</p>\n                  <p>After decrypting: </p>\n                  {\n                    (authStatus.data) ?\n                    <div>\n                      <p>Timestamp of the response: {authStatus.data.time_stamp}</p>\n                      <p>Signature (r, s): ( r: {authStatus.data.sign.r.substring(0,40)}, s: {authStatus.data.sign.s.substring(0,40)} )</p>\n                      <p>Nonce received: {authStatus.data.nonce}</p>\n                    </div>:\n                    <p>Waiting...</p>\n                  }\n                </div>\n              }\n\n            </div>\n\n          <div class = \"card2\">\n            <h5>Device sending signed and encrypted nonce</h5>\n            <p>Device ID: {keyPair.devId}</p>\n            {\n              (authStatus.data2) ?\n              <div>\n                <p>Signing the nonce: {authStatus.data.nonce}</p>\n                <p>Device signature(r, s): ( r: {authStatus.data2.sign.r.substring(0,40)}, s: {authStatus.data2.sign.s.substring(0,40)} )</p>\n              </div>:\n              <p>Preparing response</p>\n            }\n            <p>Cipher text: {(authStatus.ct2) ? authStatus.ct2.substring(0,40) : null}</p>\n          </div>\n\n          <div class = \"card2\">\n            {(authStatus.res)? <p>Authentication successful!!</p> :<p>Authentication failed...</p> }\n          </div>\n\n        </div>\n        : null\n      }\n      </div>\n\n\n\n      {\n        // <div style={{width:'50%'}}>\n        //   <Form.Group >\n        //     <Form.Label>Recipient deviceID: </Form.Label>\n        //     <Row>\n        //       <Form.Control type=\"text\" placeholder=\"deviceID\" onChange={onDevId} value={commStatus.devID} style={{width:'80%'}}/>\n        //     </Row>\n        //   </Form.Group>\n        //   <br></br>\n        //   <Form.Group>\n        //     <Form.Label>Message</Form.Label>\n        //     <Row>\n        //       <Form.Control type=\"text\" placeholder=\"Message to send\" onChange={onMsg} style={{width:'80%'}}/>\n        //       <Button id = \"button6\" style={{width:'100px'}} onClick={handleAuth} disabled={false}>\n        //       <span class=\"front\">\n        //         Send\n        //       </span>\n        //       </Button>\n        //\n        //     </Row>\n        //   </Form.Group>\n        // </div>\n        // <br></br>\n      }\n\n  \n      { (commStatus.comm_button_clicked) ?\n        <div class = \"card1\">\n\n          <p>Starting authenticated communication process</p>\n\n          <div class = \"card2\">\n            <h5>Request from device to gateway</h5>\n            <p>Device ID: {keyPair.devId}</p>\n            <p>Timestamp of the request: {(authStatus.ts1) ? authStatus.ts1 : null}</p>\n            <p>Receiver's device id: {(commStatus.devID) ? commStatus.devID : null}</p>\n            <p>Cipher text: {(authStatus.ct1) ? authStatus.ct1.substring(0,40) : null}</p>\n          </div>\n\n          <div class = \"card2\">\n            <h5>Gateway response</h5>\n            <p>Received cipher text: {(authStatus.res1) ? authStatus.res1.substring(0,40) : <>Waiting...</>}</p>\n            <p>After decrypting: </p>\n            {\n              (authStatus.data) ?\n              <div>\n                <p>Timestamp of the response: {authStatus.data.time_stamp}</p>\n                <p>Signature (r, s): ( r: {authStatus.data.sign.r.substring(0,40)}, s: {authStatus.data.sign.s.substring(0,40)} )</p>\n                <p>Nonce received: {authStatus.data.nonce}</p>\n                <p>Receiver public key: {authStatus.data.recvKey}</p>\n              </div>:\n              <p>Waiting...</p>\n            }\n          </div>\n\n          <div class = \"card2\">\n            <h5>Device sending encrypted message with signed nonce</h5>\n            <p>Device ID: {keyPair.devId}</p>\n            {\n              (authStatus.data && authStatus.data2) ?\n              <div>\n                <p>Nonce to be signed: {authStatus.data.nonce}</p>\n                <p>Recipient public key: {authStatus.data.recvKey}</p>\n                <p>Sending sample text message: {authStatus.data2.msg.substring(0,40)+\"...\"}</p>\n                <p>Device signature(r, s): ( r: {authStatus.data2.sign.r.substring(0,40)}, s: {authStatus.data2.sign.s.substring(0,40)} )</p>\n              </div>:\n              <p>Preparing response</p>\n            }\n            <p>Cipher text: {(authStatus.ct2) ? authStatus.ct2.substring(0,40) : null}</p>\n          </div>\n\n          <div style={{backgroundColor: '#d9f2de'}}>\n          {(authStatus.res)? <p>Message sent!!</p> :<p>Sending failed...</p> }\n          </div>\n\n\n        </div>\n        : null\n      }\n\n      <br></br>\n\n\n      {\n      //   (commStatus.comm_button_clicked) ?\n      // <div class = \"card1\">\n      //\n      //     <h5>Messages</h5>\n      //     <div >\n      //     <p>Received cipher text: {(commStatus.res) ? commStatus.res.substring(0,40) : <>...</>}</p>\n      //     <p>After decrypting:</p>\n      //      {\n      //        (commStatus.data) ?\n      //        <div>\n      //         <p>Timestamp: {commStatus.data.time_stamp}</p>\n      //         <p>Signature (r, s): ( r: {commStatus.data.sign.r.substring(0,40)}, s: {commStatus.data.sign.s.substring(0,40)} )</p>\n      //         <p>Received from: {commStatus.data.from}</p>\n      //         <p>Encrypted message received: {commStatus.enc}</p>\n      //         <p>Message: {commStatus.msg}</p>\n      //        </div>\n      //        : <p>...</p>\n      //      }\n      //     </div>\n      //\n      // </div>\n      // : null\n    }\n\n    {\n        // <Button id = \"button5\" onClick={() => {\n        //   console.log(\"Present msg: \", localStorage.getItem('msg'));\n        //   console.log(\"commStatus: \", commStatus.comm_button_clicked);\n        // }}><span class=\"front\">Print</span></Button>\n    }\n\n    </div>\n    </div>\n  </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}