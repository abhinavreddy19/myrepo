[{"C:\\Users\\abhi\\Desktop\\etherium\\endproject\\Device\\Device 1\\src\\index.js":"1","C:\\Users\\abhi\\Desktop\\etherium\\endproject\\Device\\Device 1\\src\\App.js":"2","C:\\Users\\abhi\\Desktop\\etherium\\endproject\\Device\\Device 3\\src\\index.js":"3","C:\\Users\\abhi\\Desktop\\etherium\\endproject\\Device\\Device 3\\src\\App.js":"4"},{"size":219,"mtime":1682148665652,"results":"5","hashOfConfig":"6"},{"size":26698,"mtime":1682234663158,"results":"7","hashOfConfig":"6"},{"size":219,"mtime":1682148665652,"results":"8","hashOfConfig":"9"},{"size":26698,"mtime":1682323050206,"results":"10","hashOfConfig":"9"},{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"h1kph9",{"filePath":"14","messages":"15","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1im1lv5",{"filePath":"19","messages":"20","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},"C:\\Users\\abhi\\Desktop\\etherium\\endproject\\Device\\Device 1\\src\\index.js",[],["22","23"],"C:\\Users\\abhi\\Desktop\\etherium\\endproject\\Device\\Device 1\\src\\App.js",["24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44"],"import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport mqtt from \"mqtt\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Button from \"react-bootstrap/Button\";\nimport {\n  Container,\n  Row,\n  Col,\n  ListGroup,\n  ListGroupItem,\n  Form,\n} from \"react-bootstrap\";\nimport myBackground from \"./background.jpg\";\nimport bgpLogo from \"./router.svg\";\nimport desktopMonitor from \"./desktop-monitor.svg\";\n\nconst elliptic = require(\"elliptic\");\nconst sha3 = require(\"js-sha3\");\nvar ecies = require(\"eciesjs\");\nconst ec = new elliptic.ec(\"secp256k1\");\nvar gateway1_pubKey =\n  \"02d3846591c11ef39031b9dd7594de19d2d2f99dd512892e13840b855194432975\";\nvar client; //Instance to coimport React, { Component }  from 'react';\nvar sendMsg = \"HELLO\";\nvar bogus_priv =\n  \"e6e1031b9eff10cd5b97a2f6a5ffc1d1d42e2ebd3eef6b050b8400259aaf3de1\";\n\n/*******************UTILITY FUNCTIONS*****************/\n/*\n'Encrypt' function receives 2 parameters:\n1. snd - An object\n2. pubK - public key of the receiver\n\nReturns the cipher string\n*/\nfunction encrypt(snd, pubK) {\n  //Uses receivers public key to encrypt.\n  let cipher = ecies.encrypt(pubK, Buffer.from(JSON.stringify(snd)));\n  let cipher_str = cipher.toString(\"hex\");\n  return cipher_str;\n}\n\n/*\n'Decrypt' function receives two parameters:\n1. rcv - Cipher text in the form of buffer.\n2. prvK - Own private key\n\nReturns the decrypted object\n*/\nfunction decrypt(rcv, prvK) {\n  //Uses own private key to decrypt.\n  let cipher_str = rcv.toString();\n  // console.log(\"Received - Encrypted message (String): \", cipher_str);\n  let cipher = Buffer.from(cipher_str, \"hex\");\n  // console.log(\"Received - Encrypted message (Buffer): \", cipher);\n  var rcv_data = ecies.decrypt(prvK, cipher).toString();\n  rcv_data = JSON.parse(rcv_data);\n  return rcv_data;\n}\n\n/*\n'sign_it' function\nParameters:\n1. prvK - Own private key\n2. Other parameters which are to be concatenated,\nhashed and then signed can be accessed through 'arguments'.\n\n\nReturns the signature object of the form:\n{\n  r:string,\n  s: string,\n  recover paramters: number\n}\n*/\n\nfunction sign_it(prvK) {\n  let msg = \"\";\n  for (let i = 1; i < arguments.length; i++) msg += arguments[i];\n  let msgHash = sha3.keccak256(msg);\n  let signature = ec.sign(msgHash, prvK, \"hex\", { canonical: true });\n\n  //The signature below consists of parameters 'r' and 's'.\n  let sign_str = JSON.parse(JSON.stringify(signature));\n  return sign_str;\n}\n\n/**\n'verify' function:\nParameters:\n1. signature - An object same as the type returned by 'sign_it'\n2. pubK - public key to be verified with.\n3. Other parameters which are to be concatenated and hashed can be accessed through 'arguments'.\n\nReturn: Boolean value indicating the authentcation status.\n*/\nfunction verify(signature, pubK) {\n  let pubKeyObj = ec.keyFromPublic(pubK, \"hex\");\n\n  let msg = \"\";\n  for (let i = 2; i < arguments.length; i++) msg += arguments[i];\n  let msgHash = sha3.keccak256(msg);\n\n  let auth_status = pubKeyObj.verify(msgHash, signature);\n\n  return auth_status;\n}\n/******************COMPONENT FUNCTION***********************/\nfunction App() {\n  /***************INITILIAZING STATES********************/\n  //Set of keys\n  const [keyPair, setKeyPair] = useState({\n    pubKey: null,\n    privKey: null,\n    privKey_0x: null,\n  });\n\n  const [toggle, setToggle] = useState(false);\n  const [showRoute, setShowRoute] = useState({\n    showRoute_button_clicked: false,\n    data: \"this is KSH\"\n  });\n\n  //This state stores the status of the device.\n  const [status, setStatus] = useState({\n    gen: false, //Whether the keys have been generated.\n    start_button_clicked: false,\n    connected: false,\n    registered: false,\n    cur_time_stamp: null,\n  });\n\n  const [regStatus, setReg] = useState({\n    reg_button_clicked: false,\n    req: null,\n    ct: null,\n    res: null,\n  });\n\n  const [authStatus, setAuth] = useState({\n    auth_button_clicked: false,\n    ts1: null, //Timestamp when the device is sending the authentication request\n    ct1: null, //Cipher text when sending the request\n    res1: null, //Nonce as cipher text sent by the gateway as response 1\n    res2: null, //Authentication status as a cipher text as response 2 but not yet used\n    data: null, //Nonce (and receivers public key) received from the gateway\n    //data2: null, //Data to be send after receiving the nonce (receiver's public key)\n    //ct2: null, // cipher text for data2\n    res: null, //Authentication status as a boolean value\n  });\n\n  const [commStatus, setComm] = useState({\n    comm_button_clicked: false,\n    devID: \"\",\n    res: null, //Whole message sent by gateway as cipher text\n    data: null, //Decrypted form of Whole message\n    msg: null,\n  });\n\n  const [buttonStatus, setButton] = useState({\n    keysClicked: false,\n    startClicked: false,\n    registerClicked: false,\n    authClicked: false,\n    showRouteClicked: false,\n    data: null,\n  });\n\n  // const [msg_to_send, setMsg] = useState(\"\");\n\n  useEffect(() => {\n    console.log(\"Key pair changed: \", keyPair);\n  }, [keyPair]);\n\n  useEffect(() => {\n    console.log(\"Registration status changed: \", status.registered);\n  }, [status.registered]);\n\n  // useEffect(() => {\n  //   console.log(\"Comm status has been changed: \", commStatus);\n  // }, [commStatus])\n\n  /***************GENERATE KEYS HANDLER********************/\n  function handleGenerate() {\n    console.log(\"Generating key pair...\");\n\n    //Creating public and private keys for the device.\n    var pair = ec.genKeyPair();\n    var priv = pair.getPrivate(\"hex\");\n    // var priv = \"6b5be97bc9065592a6eb9444f90991ca32659673fb7307a44f6948193e7b44bf\";\n    var pub = ec.keyFromPrivate(priv).getPublic(true, \"hex\");\n    // var pub = \"0206fe0109380bb9fb59cfaf24c7db9626a9bed8d1ae3c89e50d2f7671e81ee023\";\n\n    var priv_0x = \"0x\" + priv;\n    var Id = sha3.keccak256(pub + gateway1_pubKey);\n\n    setKeyPair({\n      pubKey: pub,\n      privKey: priv,\n      privKey_0x: priv_0x,\n      devId: Id,\n    });\n\n    setStatus((prev) => ({\n      ...prev,\n      gen: true,\n    }));\n\n    setButton((prev) => ({\n      ...prev,\n      keysClicked: true,\n      startClicked: false,\n      registerClicked: false,\n      authClicked: false,\n      showRouteClicked: false\n    }));\n\n    let dat = new Date(\"2000-01-01\");\n    localStorage.setItem(\"cur_time_stamp\", dat.toString());\n    localStorage.setItem(\"old\", false);\n    localStorage.setItem(\"gate\", true);\n  }\n\n  /***************CONNECTING AND SUBSCRIBING TO MQTT AND MAIN LOGIC FOR RECEIVING MESSAGES AND REPSONDING********************/\n\n  /***** This handler connects the device to the broker and subscribes to listen for responses *****/\n\n  //   function respond_nonce(){\n  //   console.log(\"Wait...\");\n  // }\n\n  function handleStart() {\n    console.log(\"Device start button clicked...\");\n    setStatus((prev) => ({\n      ...prev,\n      start_button_clicked: true,\n    }));\n\n    setButton((prev) => ({\n      ...prev,\n      keysClicked: false,\n      startClicked: true,\n      registerClicked: false,\n      authClicked: false,\n      showRouteClicked: false\n    }));\n\n    client = mqtt.connect(\"mqtt://test.mosquitto.org:8081\", {\n      protocol: \"mqtts\",\n    });\n    let data = {\n      privKey: keyPair.privKey,\n    };\n    let cipher = ecies.encrypt(\n      gateway1_pubKey,\n      Buffer.from(JSON.stringify(data))\n    );\n    let cipher_str = cipher.toString(\"hex\");\n    client.publish(\"gateway1/priv\", cipher_str);\n    client.on(\"connect\", () => {\n      /***************SUBSCRIBE TO DEVICE-ID********************/\n      client.subscribe(keyPair.devId, function (err) {\n        if (!err) {\n          console.log(\"Device started...\");\n          setStatus((prev) => ({\n            ...prev,\n            connected: true,\n          }));\n        } else {\n          console.log(\"Error starting the device...\");\n        }\n      });\n\n      /**********MESSAGE LISTENERS**************/\n      client.on(\"message\", (topic, rcv) => {\n        if (topic !== keyPair.devId) return;\n\n        var data = decrypt(rcv, keyPair.privKey_0x);\n        console.log(\"Gateway response received: \", data);\n        // console.log(\"Current time stamp: \", localStorage.getItem('cur_time_stamp'));\n\n        /***********REGISTRATION LISTENER***********/\n        if (data.remark === \"register\") {\n          if (data.status) {\n            console.log(\n              \"Device has been registered...Proceed for authentication!!\"\n            );\n            setStatus((prev) => ({\n              ...prev,\n              registered: true,\n            }));\n            setReg((prev) => ({\n              ...prev,\n              res: true,\n            }));\n          } else {\n            console.log(\"Error registering the device...\");\n          }\n        } else if (data.remark === \"nonce\") {\n          /***********NONCE LISTENER***********/\n          if (!data.status) {\n            console.log(\"Device not registered...\");\n            return;\n          }\n          if (data.recvKey) localStorage.setItem(\"recvKey\", data.recvKey);\n          setAuth((prev) => ({\n            ...prev,\n            res1: rcv.toString(),\n            data: data,\n          }));\n\n          //We have received the nonce (and receivers public key)\n          //1. Check whether the timestamp is new.\n          //2. Check the gateway\n          //3. Hash the contents and sign it\n          //4. Encrypt with gateways public key and send.\n          let d1 = new Date(data.time_stamp);\n          let d2 = new Date(localStorage.getItem(\"cur_time_stamp\"));\n\n          // console.log(\"d1: \", d1.toString(), \"\\nd2: \", d2.toString());\n\n          // 1.\n          // !status.cur_time_stamp\n          if (d1.getTime() > d2.getTime()) {\n            //2.\n            // let pubKeyObj = ec.keyFromPublic(gateway1_pubKey,\"hex\");\n            // let msgHash = sha3.keccak256(data.time_stamp);\n            // // console.log(\"Message hash: \", msgHash);\n            // let auth_status = pubKeyObj.verify(msgHash, data.sign);\n            // if(auth_status)\n            // {\n            //   //3.\n            //   // console.log(\"The text message and receiver public key just before sending: \", localStorage.getItem('msg'), \" \", localStorage.getItem('recvKey'));\n            //   //export NODE_OPTIONS=--openssl-legacy-provider\n            //   let recvKey = localStorage.getItem('recvKey');\n            //   let msg = (localStorage.getItem('msg').length === 0) ? \"\" : encrypt(localStorage.getItem('msg'), recvKey);\n            //   // bogus_priv\n            //   let sign = sign_it(keyPair.privKey, data.nonce);\n            //   let snd = {\n            //   devId: keyPair.devId,\n            //   sign: sign,\n            //   msg:  msg,\n            //   }\n            //   console.log(\"Sending the message: \", snd);\n            //   let enc_data = encrypt(snd, gateway1_pubKey);\n            //   client.publish('gateway1/auth', enc_data);\n            //   //Update the timestamp state.\n            //   // setStatus((prev) => ({\n            //   //   ...prev,\n            //   //   cur_time_stamp:data.time_stamp\n            //   // }))\n            //   setAuth((prev) => ({\n            //     ...prev,\n            //     data2: snd,\n            //     ct2: enc_data,\n            //   }))\n            //   // localStorage.setItem('old', false);\n            //   localStorage.setItem('gate', true);\n            //   localStorage.setItem('cur_time_stamp', data.time_stamp);\n            //   // console.log(\"Current time stamp now: \", localStorage.getItem('cur_time_stamp'));\n            // }\n            //   else\n            //   {\n            //     console.log(\"Gateway signature verification failed...\");\n            //     setAuth((prev) => ({\n            //       ...prev,\n            //       data2: null,\n            //       ct2: null\n            //     }))\n            //     localStorage.setItem('gate', false);\n            //   }\n          } else {\n            console.log(\"Timestamp is old: \");\n            console.log(\n              \"Latest timestamp stored: \",\n              localStorage.getItem(\"cur_time_stamp\")\n            );\n            console.log(\"Received time stamp: \", data.time_stamp);\n            setAuth((prev) => ({\n              ...prev,\n              data2: null,\n              ct2: null,\n            }));\n            // localStorage.setItem('old', true);\n            localStorage.setItem(\"gate\", false);\n          }\n        } else if (data.remark === \"auth\") {\n          /***********AUTH LISTENER***********/\n          //This is the response from the gateway after processing the request.\n          //1. Check gateway.\n          //2. Check status.\n          let d1 = new Date(data.time_stamp);\n          let d2 = new Date(status.cur_time_stamp);\n          if (!status.cur_time_stamp || d1.getTime() > d2.getTime()) {\n            let pubKeyObj = ec.keyFromPublic(gateway1_pubKey, \"hex\");\n            let msgHash = sha3.keccak256(data.time_stamp);\n            let auth_status = pubKeyObj.verify(msgHash, data.sign);\n            if (auth_status) {\n              setAuth((prev) => ({\n                ...prev,\n                res: data.status,\n              }));\n              console.log(\"Auth status received: \", data.status);\n            } else console.log(\"Gateway signature verification failed...\");\n          } else console.log(\"Timestamp is old...\");\n        } else if (data.remark === \"message\") {\n          let d1 = new Date(data.time_stamp);\n          let d2 = new Date(status.cur_time_stamp);\n          console.log(\"Received a message: \", data.msg);\n          if (d1.getTime() > d2.getTime()) {\n            let auth_status = verify(\n              data.sign,\n              gateway1_pubKey,\n              data.time_stamp\n            );\n\n            if (auth_status) {\n              setStatus((prev) => ({\n                ...prev,\n                cur_time_stamp: data.time_stamp,\n              }));\n              setComm((prev) => ({\n                ...commStatus,\n                res: rcv.toString(),\n                data: data,\n                enc: data.msg,\n                msg: decrypt(data.msg, keyPair.privKey_0x),\n              }));\n            } else {\n              console.log(\"Cannot verify gateway signature...\");\n            }\n          } else {\n            console.log(\"Timestamp is old...\");\n          }\n        }\n      });\n    });\n  }\n\n  /***************DEVICE REGISTRATION HANDLER********************/\n  function handleRegister() {\n    console.log(\"Requesting registration...\");\n    //The devID, PubKey encrypted with gateway public key is sent to the gateway on the topic register1.\n    let d = new Date();\n    let d_str = d.toString();\n    let sign = sign_it(keyPair.privKey, d_str);\n    let data = {\n      devId: keyPair.devId,\n      pubKey: keyPair.pubKey,\n      TS: d_str,\n      sign: sign,\n    };\n    let cipher = ecies.encrypt(\n      gateway1_pubKey,\n      Buffer.from(JSON.stringify(data))\n    );\n    let cipher_str = cipher.toString(\"hex\");\n    setReg((prev) => ({\n      ...prev,\n      reg_button_clicked: true,\n      req: data,\n      ct: cipher_str,\n    }));\n\n    setButton((prev) => ({\n      ...prev,\n      keysClicked: false,\n      startClicked: false,\n      registerClicked: true,\n      authClicked: false,\n      showRouteClicked: false\n    }));\n\n    client.publish(\"gateway1/register\", cipher_str);\n  }\n\n  /***************DEVCE AUTHENTICATION HANDLER********************/\n  function handleAuth() {\n    //Here the device requests the gateway for authentication.\n    //The gateway responds by sending a nonce.\n    console.log(\"Requesting for authentication...\");\n    setAuth((prev) => ({\n      ...prev,\n      auth_button_clicked: commStatus.devID.length === 0,\n    }));\n    setComm((prev) => ({\n      ...prev,\n      comm_button_clicked: commStatus.devID.length !== 0,\n    }));\n    let d = new Date();\n    let d_str = d.toString();\n    let data = {\n      devId: keyPair.devId,\n      TS: d_str,\n      recvId: commStatus.devID.length !== 0 ? commStatus.devID : null,\n    };\n    let cipher = ecies.encrypt(\n      gateway1_pubKey,\n      Buffer.from(JSON.stringify(data))\n    );\n    let cipher_str = cipher.toString(\"hex\");\n\n    setAuth((prev) => ({\n      ...prev,\n      ts1: d_str,\n      ct1: cipher_str,\n    }));\n\n    setButton((prev) => ({\n      ...prev,\n      keysClicked: false,\n      startClicked: false,\n      registerClicked: false,\n      authClicked: true,\n      showRouteClicked: false\n    }));\n    //console.log(\"destdevice :\",commStatus.devID);\n    \n\n    client.publish(\"gateway1/nonce\", cipher_str);\n  }\n\n  function handleShowRoute() {\n    setButton((prev) => ({\n      ...prev,\n      keysClicked: false,\n      startClicked: false,\n      registerClicked: false,\n      authClicked: false,\n      showRouteClicked: true\n    }));\n    setComm((prev) => ({\n      ...prev,\n      comm_button_clicked: commStatus.devID.length !== 0,\n    }));\n    return;\n  }\n\n  function onDevId(e) {\n    const inputValue = e.target.value;\n    if (inputValue.trim() === \"\") {\n      console.log(\"Input value is empty\");\n    } else {\n      console.log(\"Input value is not empty\");\n    }\n    setComm((prev) => ({\n      ...prev,\n      devID: e.target.value,\n    }));\n      \n  }\n\n  function onMsg(e) {\n    // setMsg((prev) => (e.target.value));\n    localStorage.setItem(\"msg\", e.target.value);\n  }\n\n  /************************COMPONENT TO BE RENDERED*****************************/\n  return (\n    <div className=\"App\">\n      <div class=\"page-header\">\n        <img src={bgpLogo} height=\"45\" width=\"45\" />\n        <h1> BGP Device </h1>\n      </div>\n      <div class=\"page-border\"></div>\n      <br></br>\n      <div class=\"parent\">\n        <div class=\"buttons\">\n          <Button className=\"button\" id=\"button1\" onClick={handleGenerate}>\n            {\" \"}\n            <span class=\"front\"> Keys </span>{\" \"}\n          </Button>\n          <div class=\"vertical\"></div>\n          <Button className=\"button\" id=\"button2\" onClick={handleStart}>\n            {\" \"}\n            <span class=\"front\">Start the device </span>\n          </Button>\n          <div class=\"vertical\"></div>\n          <Button className=\"button\" id=\"button3\" onClick={handleRegister}>\n            {\" \"}\n            <span class=\"front\"> Register </span>{\" \"}\n          </Button>\n          <div class=\"vertical\"></div>\n          <Button\n            className=\"button\"\n            id=\"button4\"\n            onClick={handleAuth}\n            disabled={false}\n          >\n            <span class=\"front\">Authenticate </span>\n          </Button>\n        </div>\n\n        <div class=\"cards\">\n          {!buttonStatus.keysClicked &&\n          !buttonStatus.startClicked &&\n          !buttonStatus.registerClicked &&\n          !buttonStatus.authClicked &&\n          !buttonStatus.showRouteClicked ? (\n            <div class=\"card1\">\n              <h3 className = \"swift-up-text\"> Hi, Welcome to BGP simulation </h3>\n            </div>\n          ) : (\n            <>{/* {console.log(\"Key pair not generated...\")} */}</>\n          )}\n\n          {buttonStatus.keysClicked && keyPair.privKey ? (\n            <div class=\"card1\">\n              <h4 class = \"swift-up-text\"> >> Keys </h4>\n\n              <p class = \"swift-up-text\">Device Id: {keyPair.devId}</p>\n              <p class = \"swift-up-text\">Public key: {keyPair.pubKey}</p>\n              <p class = \"swift-up-text\">Private key: {keyPair.privKey}</p>\n            </div>\n          ) : (\n            <>{/* {console.log(\"Key pair not generated...\")} */}</>\n          )}\n\n          {buttonStatus.startClicked && status.start_button_clicked ? (\n            <div class=\"card1\">\n              {!status.connected ? (\n                <h4> Connecting to broker</h4>\n              ) : (\n                <p>Device Ready!</p>\n              )}\n            </div>\n          ) : null}\n\n          {buttonStatus.registerClicked && regStatus.reg_button_clicked ? (\n            <div class=\"card1\">\n              <h4>Requesting registration...</h4>\n              <div class=\"card2\">\n                <h5>Device to gateway</h5>\n                <p>Device ID: {keyPair.devId}</p>\n                <p>Public key: {keyPair.pubKey}</p>\n                {regStatus.req ? (\n                  <div>\n                    <p>Timestamp of the request: {regStatus.req.TS}</p>\n                    <p>\n                      Signature (r, s): ( r:{\" \"}\n                      {regStatus.req.sign.r.substring(0, 40)}, s:{\" \"}\n                      {regStatus.req.sign.s.substring(0, 40)} )\n                    </p>\n                  </div>\n                ) : (\n                  <p>Signing...</p>\n                )}\n                <p>\n                  Encrypted request:{\" \"}\n                  {regStatus.ct ? regStatus.ct.substring(0, 40) + \"...\" : null}\n                </p>\n              </div>\n\n              <div class=\"card2\">\n                <h5>Gateway to device</h5>\n                {status.registered ? (\n                  <p>Registration status: TRUE</p>\n                ) : (\n                  <p>Registration status: FALSE</p>\n                )}\n              </div>\n            </div>\n          ) : null}\n\n          {buttonStatus.authClicked && authStatus.auth_button_clicked ? (\n            <div class=\"card1\">\n              <h4>Starting authentication process</h4>\n              <div class=\"card2\">\n                <h5>Request from device to gateway</h5>\n                <p>Device ID: {keyPair.devId}</p>\n                <p>\n                  Timestamp of the request:{\" \"}\n                  {authStatus.ts1 ? authStatus.ts1 : null}\n                </p>\n                <p>\n                  Cipher text:{\" \"}\n                  {authStatus.ct1 ? authStatus.ct1.substring(0, 40) : null}\n                </p>\n              </div>\n\n              <div class=\"card2\">\n                <h5>lbr response</h5>\n                {\n                  <div>\n                    <p>\n                      Received cipher text:{\" \"}\n                      {authStatus.res1 ? (\n                        authStatus.res1.substring(0, 40)\n                      ) : (\n                        <>Waiting...</>\n                      )}\n                    </p>\n                    <p>After decrypting: </p>\n                    {authStatus.data ? (\n                      <div>\n                        <p>\n                          Timestamp of the response:{\" \"}\n                          {authStatus.data.time_stamp}\n                        </p>\n                        <p>\n                          Signature (r, s): ( r:{\" \"}\n                          {authStatus.data.sign.r.substring(0, 40)}, s:{\" \"}\n                          {authStatus.data.sign.s.substring(0, 40)} )\n                        </p>\n                        {/* <p>Nonce received: {authStatus.data.nonce}</p> */}\n                      </div>\n                    ) : (\n                      <p>Waiting...</p>\n                    )}\n                  </div>\n                }\n              </div>\n\n              {/* <div class = \"card2\">\n            <h5>Device sending signed and encrypted nonce</h5>\n            <p>Device ID: {keyPair.devId}</p>\n            {\n              (authStatus.data2) ?\n              <div>\n                <p>Signing the nonce: {authStatus.data.nonce}</p>\n                <p>Device signature(r, s): ( r: {authStatus.data2.sign.r.substring(0,40)}, s: {authStatus.data2.sign.s.substring(0,40)} )</p>\n              </div>:\n              <p>Preparing response</p>\n            }\n            <p>Cipher text: {(authStatus.ct2) ? authStatus.ct2.substring(0,40) : null}</p>\n          </div> */}\n              {authStatus.res1 ? (\n                <div class=\"card2\">\n                  {!authStatus.res ? (\n                    <h5>Authentication successful!!</h5>\n                  ) : (\n                    <h5>Authentication failed :(</h5>\n                  )}\n                </div>\n              ) : null}\n            </div>\n          ) : null}\n\n          {commStatus.comm_button_clicked ? (\n            <div class=\"card1\">\n              <p>Starting authenticated routing process</p>\n\n              <div class=\"card2\">\n                <h5>Request from device to lbr</h5>\n                <p>Device ID: {keyPair.devId}</p>\n                <p>\n                  Timestamp of the request:{\" \"}\n                  {authStatus.ts1 ? authStatus.ts1 : null}\n                </p>\n                <p>\n                  Receiver's device id:{\" \"}\n                  {commStatus.devID ? commStatus.devID : null}\n                </p>\n                <p>\n                  Cipher text:{\" \"}\n                  {authStatus.ct1 ? authStatus.ct1.substring(0, 40) : null}\n                </p>\n              </div>\n\n              <div class=\"card2\">\n                <h5>Gateway response</h5>\n                <p>\n                  Received cipher text:{\" \"}\n                  {authStatus.res1 ? (\n                    authStatus.res1.substring(0, 40)\n                  ) : (\n                    <>Waiting...</>\n                  )}\n                </p>\n                <p>After decrypting: </p>\n                {authStatus.data ? (\n                  <div>\n                    <p>\n                      Timestamp of the response: {authStatus.data.time_stamp}\n                    </p>\n                    <p>\n                      Signature (r, s): ( r:{\" \"}\n                      {authStatus.data.sign.r.substring(0, 40)}, s:{\" \"}\n                      {authStatus.data.sign.s.substring(0, 40)} )\n                    </p>\n                    <p>Nonce received: {authStatus.data.nonce}</p>\n                    {authStatus.data.recvKey &&\n                    authStatus.data.recvKey.length > 0 ? (\n                      <p>Receiver public key: {authStatus.data.recvKey}</p>\n                    ) : (\n                      \"Error! Receiver is not registered!!\"\n                    )}\n                  </div>\n                ) : (\n                  <p>Waiting...</p>\n                )}\n              </div>\n            </div>\n          ) : null}\n\n\n        </div>\n\n        {\n          <div class=\"card3\">\n            <div className=\"recipientID\">\n              <p>Recipient deviceID: </p>\n              <input\n                type=\"text\"\n                placeholder=\"deviceID\"\n                onChange={onDevId}\n                value={commStatus.devID}\n              />\n            </div>\n            <br></br>\n\n            <Button\n              id=\"button6\"\n              style={{ width: \"100px\" }}\n              onClick={handleAuth}\n              disabled={false}\n            >\n              <span class=\"front\">Show Route</span>\n            </Button>\n          </div>\n        }\n      </div>\n      <img src={desktopMonitor} id=\"img123\" width=\"800\" height=\"80\" />\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\abhi\\Desktop\\etherium\\endproject\\Device\\Device 3\\src\\index.js",[],"C:\\Users\\abhi\\Desktop\\etherium\\endproject\\Device\\Device 3\\src\\App.js",["45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65"],"import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport mqtt from \"mqtt\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Button from \"react-bootstrap/Button\";\nimport {\n  Container,\n  Row,\n  Col,\n  ListGroup,\n  ListGroupItem,\n  Form,\n} from \"react-bootstrap\";\nimport myBackground from \"./background.jpg\";\nimport bgpLogo from \"./router.svg\";\nimport desktopMonitor from \"./desktop-monitor.svg\";\n\nconst elliptic = require(\"elliptic\");\nconst sha3 = require(\"js-sha3\");\nvar ecies = require(\"eciesjs\");\nconst ec = new elliptic.ec(\"secp256k1\");\nvar gateway3_pubKey =\n  \"033cbd3328a69d96f7baea420cc68bb3704140b397df818f877ffc33f459bc7c5b\";\nvar client; //Instance to coimport React, { Component }  from 'react';\nvar sendMsg = \"HELLO\";\nvar bogus_priv =\n  \"e6e1031b9eff10cd5b97a2f6a5ffc1d1d42e2ebd3eef6b050b8400259aaf3de1\";\n\n/*******************UTILITY FUNCTIONS*****************/\n/*\n'Encrypt' function receives 2 parameters:\n1. snd - An object\n2. pubK - public key of the receiver\n\nReturns the cipher string\n*/\nfunction encrypt(snd, pubK) {\n  //Uses receivers public key to encrypt.\n  let cipher = ecies.encrypt(pubK, Buffer.from(JSON.stringify(snd)));\n  let cipher_str = cipher.toString(\"hex\");\n  return cipher_str;\n}\n\n/*\n'Decrypt' function receives two parameters:\n1. rcv - Cipher text in the form of buffer.\n2. prvK - Own private key\n\nReturns the decrypted object\n*/\nfunction decrypt(rcv, prvK) {\n  //Uses own private key to decrypt.\n  let cipher_str = rcv.toString();\n  // console.log(\"Received - Encrypted message (String): \", cipher_str);\n  let cipher = Buffer.from(cipher_str, \"hex\");\n  // console.log(\"Received - Encrypted message (Buffer): \", cipher);\n  var rcv_data = ecies.decrypt(prvK, cipher).toString();\n  rcv_data = JSON.parse(rcv_data);\n  return rcv_data;\n}\n\n/*\n'sign_it' function\nParameters:\n1. prvK - Own private key\n2. Other parameters which are to be concatenated,\nhashed and then signed can be accessed through 'arguments'.\n\n\nReturns the signature object of the form:\n{\n  r:string,\n  s: string,\n  recover paramters: number\n}\n*/\n\nfunction sign_it(prvK) {\n  let msg = \"\";\n  for (let i = 1; i < arguments.length; i++) msg += arguments[i];\n  let msgHash = sha3.keccak256(msg);\n  let signature = ec.sign(msgHash, prvK, \"hex\", { canonical: true });\n\n  //The signature below consists of parameters 'r' and 's'.\n  let sign_str = JSON.parse(JSON.stringify(signature));\n  return sign_str;\n}\n\n/**\n'verify' function:\nParameters:\n1. signature - An object same as the type returned by 'sign_it'\n2. pubK - public key to be verified with.\n3. Other parameters which are to be concatenated and hashed can be accessed through 'arguments'.\n\nReturn: Boolean value indicating the authentcation status.\n*/\nfunction verify(signature, pubK) {\n  let pubKeyObj = ec.keyFromPublic(pubK, \"hex\");\n\n  let msg = \"\";\n  for (let i = 2; i < arguments.length; i++) msg += arguments[i];\n  let msgHash = sha3.keccak256(msg);\n\n  let auth_status = pubKeyObj.verify(msgHash, signature);\n\n  return auth_status;\n}\n/******************COMPONENT FUNCTION***********************/\nfunction App() {\n  /***************INITILIAZING STATES********************/\n  //Set of keys\n  const [keyPair, setKeyPair] = useState({\n    pubKey: null,\n    privKey: null,\n    privKey_0x: null,\n  });\n\n  const [toggle, setToggle] = useState(false);\n  const [showRoute, setShowRoute] = useState({\n    showRoute_button_clicked: false,\n    data: \"this is KSH\"\n  });\n\n  //This state stores the status of the device.\n  const [status, setStatus] = useState({\n    gen: false, //Whether the keys have been generated.\n    start_button_clicked: false,\n    connected: false,\n    registered: false,\n    cur_time_stamp: null,\n  });\n\n  const [regStatus, setReg] = useState({\n    reg_button_clicked: false,\n    req: null,\n    ct: null,\n    res: null,\n  });\n\n  const [authStatus, setAuth] = useState({\n    auth_button_clicked: false,\n    ts1: null, //Timestamp when the device is sending the authentication request\n    ct1: null, //Cipher text when sending the request\n    res1: null, //Nonce as cipher text sent by the gateway as response 1\n    res2: null, //Authentication status as a cipher text as response 2 but not yet used\n    data: null, //Nonce (and receivers public key) received from the gateway\n    //data2: null, //Data to be send after receiving the nonce (receiver's public key)\n    //ct2: null, // cipher text for data2\n    res: null, //Authentication status as a boolean value\n  });\n\n  const [commStatus, setComm] = useState({\n    comm_button_clicked: false,\n    devID: \"\",\n    res: null, //Whole message sent by gateway as cipher text\n    data: null, //Decrypted form of Whole message\n    msg: null,\n  });\n\n  const [buttonStatus, setButton] = useState({\n    keysClicked: false,\n    startClicked: false,\n    registerClicked: false,\n    authClicked: false,\n    showRouteClicked: false,\n    data: null,\n  });\n\n  // const [msg_to_send, setMsg] = useState(\"\");\n\n  useEffect(() => {\n    console.log(\"Key pair changed: \", keyPair);\n  }, [keyPair]);\n\n  useEffect(() => {\n    console.log(\"Registration status changed: \", status.registered);\n  }, [status.registered]);\n\n  // useEffect(() => {\n  //   console.log(\"Comm status has been changed: \", commStatus);\n  // }, [commStatus])\n\n  /***************GENERATE KEYS HANDLER********************/\n  function handleGenerate() {\n    console.log(\"Generating key pair...\");\n\n    //Creating public and private keys for the device.\n    var pair = ec.genKeyPair();\n    var priv = pair.getPrivate(\"hex\");\n    // var priv = \"6b5be97bc9065592a6eb9444f90991ca32659673fb7307a44f6948193e7b44bf\";\n    var pub = ec.keyFromPrivate(priv).getPublic(true, \"hex\");\n    // var pub = \"0206fe0109380bb9fb59cfaf24c7db9626a9bed8d1ae3c89e50d2f7671e81ee023\";\n\n    var priv_0x = \"0x\" + priv;\n    var Id = sha3.keccak256(pub + gateway3_pubKey);\n\n    setKeyPair({\n      pubKey: pub,\n      privKey: priv,\n      privKey_0x: priv_0x,\n      devId: Id,\n    });\n\n    setStatus((prev) => ({\n      ...prev,\n      gen: true,\n    }));\n\n    setButton((prev) => ({\n      ...prev,\n      keysClicked: true,\n      startClicked: false,\n      registerClicked: false,\n      authClicked: false,\n      showRouteClicked: false\n    }));\n\n    let dat = new Date(\"2000-01-01\");\n    localStorage.setItem(\"cur_time_stamp\", dat.toString());\n    localStorage.setItem(\"old\", false);\n    localStorage.setItem(\"gate\", true);\n  }\n\n  /***************CONNECTING AND SUBSCRIBING TO MQTT AND MAIN LOGIC FOR RECEIVING MESSAGES AND REPSONDING********************/\n\n  /***** This handler connects the device to the broker and subscribes to listen for responses *****/\n\n  //   function respond_nonce(){\n  //   console.log(\"Wait...\");\n  // }\n\n  function handleStart() {\n    console.log(\"Device start button clicked...\");\n    setStatus((prev) => ({\n      ...prev,\n      start_button_clicked: true,\n    }));\n\n    setButton((prev) => ({\n      ...prev,\n      keysClicked: false,\n      startClicked: true,\n      registerClicked: false,\n      authClicked: false,\n      showRouteClicked: false\n    }));\n\n    client = mqtt.connect(\"mqtt://test.mosquitto.org:8081\", {\n      protocol: \"mqtts\",\n    });\n    let data = {\n      privKey: keyPair.privKey,\n    };\n    let cipher = ecies.encrypt(\n      gateway3_pubKey,\n      Buffer.from(JSON.stringify(data))\n    );\n    let cipher_str = cipher.toString(\"hex\");\n    client.publish(\"gateway3/priv\", cipher_str);\n    client.on(\"connect\", () => {\n      /***************SUBSCRIBE TO DEVICE-ID********************/\n      client.subscribe(keyPair.devId, function (err) {\n        if (!err) {\n          console.log(\"Device started...\");\n          setStatus((prev) => ({\n            ...prev,\n            connected: true,\n          }));\n        } else {\n          console.log(\"Error starting the device...\");\n        }\n      });\n\n      /**********MESSAGE LISTENERS**************/\n      client.on(\"message\", (topic, rcv) => {\n        if (topic !== keyPair.devId) return;\n\n        var data = decrypt(rcv, keyPair.privKey_0x);\n        console.log(\"Gateway response received: \", data);\n        // console.log(\"Current time stamp: \", localStorage.getItem('cur_time_stamp'));\n\n        /***********REGISTRATION LISTENER***********/\n        if (data.remark === \"register\") {\n          if (data.status) {\n            console.log(\n              \"Device has been registered...Proceed for authentication!!\"\n            );\n            setStatus((prev) => ({\n              ...prev,\n              registered: true,\n            }));\n            setReg((prev) => ({\n              ...prev,\n              res: true,\n            }));\n          } else {\n            console.log(\"Error registering the device...\");\n          }\n        } else if (data.remark === \"nonce\") {\n          /***********NONCE LISTENER***********/\n          if (!data.status) {\n            console.log(\"Device not registered...\");\n            return;\n          }\n          if (data.recvKey) localStorage.setItem(\"recvKey\", data.recvKey);\n          setAuth((prev) => ({\n            ...prev,\n            res1: rcv.toString(),\n            data: data,\n          }));\n\n          //We have received the nonce (and receivers public key)\n          //1. Check whether the timestamp is new.\n          //2. Check the gateway\n          //3. Hash the contents and sign it\n          //4. Encrypt with gateways public key and send.\n          let d1 = new Date(data.time_stamp);\n          let d2 = new Date(localStorage.getItem(\"cur_time_stamp\"));\n\n          // console.log(\"d1: \", d1.toString(), \"\\nd2: \", d2.toString());\n\n          // 1.\n          // !status.cur_time_stamp\n          if (d1.getTime() > d2.getTime()) {\n            //2.\n            // let pubKeyObj = ec.keyFromPublic(gateway3_pubKey,\"hex\");\n            // let msgHash = sha3.keccak256(data.time_stamp);\n            // // console.log(\"Message hash: \", msgHash);\n            // let auth_status = pubKeyObj.verify(msgHash, data.sign);\n            // if(auth_status)\n            // {\n            //   //3.\n            //   // console.log(\"The text message and receiver public key just before sending: \", localStorage.getItem('msg'), \" \", localStorage.getItem('recvKey'));\n            //   //export NODE_OPTIONS=--openssl-legacy-provider\n            //   let recvKey = localStorage.getItem('recvKey');\n            //   let msg = (localStorage.getItem('msg').length === 0) ? \"\" : encrypt(localStorage.getItem('msg'), recvKey);\n            //   // bogus_priv\n            //   let sign = sign_it(keyPair.privKey, data.nonce);\n            //   let snd = {\n            //   devId: keyPair.devId,\n            //   sign: sign,\n            //   msg:  msg,\n            //   }\n            //   console.log(\"Sending the message: \", snd);\n            //   let enc_data = encrypt(snd, gateway3_pubKey);\n            //   client.publish('gateway3/auth', enc_data);\n            //   //Update the timestamp state.\n            //   // setStatus((prev) => ({\n            //   //   ...prev,\n            //   //   cur_time_stamp:data.time_stamp\n            //   // }))\n            //   setAuth((prev) => ({\n            //     ...prev,\n            //     data2: snd,\n            //     ct2: enc_data,\n            //   }))\n            //   // localStorage.setItem('old', false);\n            //   localStorage.setItem('gate', true);\n            //   localStorage.setItem('cur_time_stamp', data.time_stamp);\n            //   // console.log(\"Current time stamp now: \", localStorage.getItem('cur_time_stamp'));\n            // }\n            //   else\n            //   {\n            //     console.log(\"Gateway signature verification failed...\");\n            //     setAuth((prev) => ({\n            //       ...prev,\n            //       data2: null,\n            //       ct2: null\n            //     }))\n            //     localStorage.setItem('gate', false);\n            //   }\n          } else {\n            console.log(\"Timestamp is old: \");\n            console.log(\n              \"Latest timestamp stored: \",\n              localStorage.getItem(\"cur_time_stamp\")\n            );\n            console.log(\"Received time stamp: \", data.time_stamp);\n            setAuth((prev) => ({\n              ...prev,\n              data2: null,\n              ct2: null,\n            }));\n            // localStorage.setItem('old', true);\n            localStorage.setItem(\"gate\", false);\n          }\n        } else if (data.remark === \"auth\") {\n          /***********AUTH LISTENER***********/\n          //This is the response from the gateway after processing the request.\n          //1. Check gateway.\n          //2. Check status.\n          let d1 = new Date(data.time_stamp);\n          let d2 = new Date(status.cur_time_stamp);\n          if (!status.cur_time_stamp || d1.getTime() > d2.getTime()) {\n            let pubKeyObj = ec.keyFromPublic(gateway3_pubKey, \"hex\");\n            let msgHash = sha3.keccak256(data.time_stamp);\n            let auth_status = pubKeyObj.verify(msgHash, data.sign);\n            if (auth_status) {\n              setAuth((prev) => ({\n                ...prev,\n                res: data.status,\n              }));\n              console.log(\"Auth status received: \", data.status);\n            } else console.log(\"Gateway signature verification failed...\");\n          } else console.log(\"Timestamp is old...\");\n        } else if (data.remark === \"message\") {\n          let d1 = new Date(data.time_stamp);\n          let d2 = new Date(status.cur_time_stamp);\n          console.log(\"Received a message: \", data.msg);\n          if (d1.getTime() > d2.getTime()) {\n            let auth_status = verify(\n              data.sign,\n              gateway3_pubKey,\n              data.time_stamp\n            );\n\n            if (auth_status) {\n              setStatus((prev) => ({\n                ...prev,\n                cur_time_stamp: data.time_stamp,\n              }));\n              setComm((prev) => ({\n                ...commStatus,\n                res: rcv.toString(),\n                data: data,\n                enc: data.msg,\n                msg: decrypt(data.msg, keyPair.privKey_0x),\n              }));\n            } else {\n              console.log(\"Cannot verify gateway signature...\");\n            }\n          } else {\n            console.log(\"Timestamp is old...\");\n          }\n        }\n      });\n    });\n  }\n\n  /***************DEVICE REGISTRATION HANDLER********************/\n  function handleRegister() {\n    console.log(\"Requesting registration...\");\n    //The devID, PubKey encrypted with gateway public key is sent to the gateway on the topic register1.\n    let d = new Date();\n    let d_str = d.toString();\n    let sign = sign_it(keyPair.privKey, d_str);\n    let data = {\n      devId: keyPair.devId,\n      pubKey: keyPair.pubKey,\n      TS: d_str,\n      sign: sign,\n    };\n    let cipher = ecies.encrypt(\n      gateway3_pubKey,\n      Buffer.from(JSON.stringify(data))\n    );\n    let cipher_str = cipher.toString(\"hex\");\n    setReg((prev) => ({\n      ...prev,\n      reg_button_clicked: true,\n      req: data,\n      ct: cipher_str,\n    }));\n\n    setButton((prev) => ({\n      ...prev,\n      keysClicked: false,\n      startClicked: false,\n      registerClicked: true,\n      authClicked: false,\n      showRouteClicked: false\n    }));\n\n    client.publish(\"gateway3/register\", cipher_str);\n  }\n\n  /***************DEVCE AUTHENTICATION HANDLER********************/\n  function handleAuth() {\n    //Here the device requests the gateway for authentication.\n    //The gateway responds by sending a nonce.\n    console.log(\"Requesting for authentication...\");\n    setAuth((prev) => ({\n      ...prev,\n      auth_button_clicked: commStatus.devID.length === 0,\n    }));\n    setComm((prev) => ({\n      ...prev,\n      comm_button_clicked: commStatus.devID.length !== 0,\n    }));\n    let d = new Date();\n    let d_str = d.toString();\n    let data = {\n      devId: keyPair.devId,\n      TS: d_str,\n      recvId: commStatus.devID.length !== 0 ? commStatus.devID : null,\n    };\n    let cipher = ecies.encrypt(\n      gateway3_pubKey,\n      Buffer.from(JSON.stringify(data))\n    );\n    let cipher_str = cipher.toString(\"hex\");\n\n    setAuth((prev) => ({\n      ...prev,\n      ts1: d_str,\n      ct1: cipher_str,\n    }));\n\n    setButton((prev) => ({\n      ...prev,\n      keysClicked: false,\n      startClicked: false,\n      registerClicked: false,\n      authClicked: true,\n      showRouteClicked: false\n    }));\n    //console.log(\"destdevice :\",commStatus.devID);\n    \n\n    client.publish(\"gateway3/nonce\", cipher_str);\n  }\n\n  function handleShowRoute() {\n    setButton((prev) => ({\n      ...prev,\n      keysClicked: false,\n      startClicked: false,\n      registerClicked: false,\n      authClicked: false,\n      showRouteClicked: true\n    }));\n    setComm((prev) => ({\n      ...prev,\n      comm_button_clicked: commStatus.devID.length !== 0,\n    }));\n    return;\n  }\n\n  function onDevId(e) {\n    const inputValue = e.target.value;\n    if (inputValue.trim() === \"\") {\n      console.log(\"Input value is empty\");\n    } else {\n      console.log(\"Input value is not empty\");\n    }\n    setComm((prev) => ({\n      ...prev,\n      devID: e.target.value,\n    }));\n      \n  }\n\n  function onMsg(e) {\n    // setMsg((prev) => (e.target.value));\n    localStorage.setItem(\"msg\", e.target.value);\n  }\n\n  /************************COMPONENT TO BE RENDERED*****************************/\n  return (\n    <div className=\"App\">\n      <div class=\"page-header\">\n        <img src={bgpLogo} height=\"45\" width=\"45\" />\n        <h1> BGP Device </h1>\n      </div>\n      <div class=\"page-border\"></div>\n      <br></br>\n      <div class=\"parent\">\n        <div class=\"buttons\">\n          <Button className=\"button\" id=\"button1\" onClick={handleGenerate}>\n            {\" \"}\n            <span class=\"front\"> Keys </span>{\" \"}\n          </Button>\n          <div class=\"vertical\"></div>\n          <Button className=\"button\" id=\"button2\" onClick={handleStart}>\n            {\" \"}\n            <span class=\"front\">Start the device </span>\n          </Button>\n          <div class=\"vertical\"></div>\n          <Button className=\"button\" id=\"button3\" onClick={handleRegister}>\n            {\" \"}\n            <span class=\"front\"> Register </span>{\" \"}\n          </Button>\n          <div class=\"vertical\"></div>\n          <Button\n            className=\"button\"\n            id=\"button4\"\n            onClick={handleAuth}\n            disabled={false}\n          >\n            <span class=\"front\">Authenticate </span>\n          </Button>\n        </div>\n\n        <div class=\"cards\">\n          {!buttonStatus.keysClicked &&\n          !buttonStatus.startClicked &&\n          !buttonStatus.registerClicked &&\n          !buttonStatus.authClicked &&\n          !buttonStatus.showRouteClicked ? (\n            <div class=\"card1\">\n              <h3 className = \"swift-up-text\"> Hi, Welcome to BGP simulation </h3>\n            </div>\n          ) : (\n            <>{/* {console.log(\"Key pair not generated...\")} */}</>\n          )}\n\n          {buttonStatus.keysClicked && keyPair.privKey ? (\n            <div class=\"card1\">\n              <h4 class = \"swift-up-text\"> >> Keys </h4>\n\n              <p class = \"swift-up-text\">Device Id: {keyPair.devId}</p>\n              <p class = \"swift-up-text\">Public key: {keyPair.pubKey}</p>\n              <p class = \"swift-up-text\">Private key: {keyPair.privKey}</p>\n            </div>\n          ) : (\n            <>{/* {console.log(\"Key pair not generated...\")} */}</>\n          )}\n\n          {buttonStatus.startClicked && status.start_button_clicked ? (\n            <div class=\"card1\">\n              {!status.connected ? (\n                <h4> Connecting to broker</h4>\n              ) : (\n                <p>Device Ready!</p>\n              )}\n            </div>\n          ) : null}\n\n          {buttonStatus.registerClicked && regStatus.reg_button_clicked ? (\n            <div class=\"card1\">\n              <h4>Requesting registration...</h4>\n              <div class=\"card2\">\n                <h5>Device to gateway</h5>\n                <p>Device ID: {keyPair.devId}</p>\n                <p>Public key: {keyPair.pubKey}</p>\n                {regStatus.req ? (\n                  <div>\n                    <p>Timestamp of the request: {regStatus.req.TS}</p>\n                    <p>\n                      Signature (r, s): ( r:{\" \"}\n                      {regStatus.req.sign.r.substring(0, 40)}, s:{\" \"}\n                      {regStatus.req.sign.s.substring(0, 40)} )\n                    </p>\n                  </div>\n                ) : (\n                  <p>Signing...</p>\n                )}\n                <p>\n                  Encrypted request:{\" \"}\n                  {regStatus.ct ? regStatus.ct.substring(0, 40) + \"...\" : null}\n                </p>\n              </div>\n\n              <div class=\"card2\">\n                <h5>Gateway to device</h5>\n                {status.registered ? (\n                  <p>Registration status: TRUE</p>\n                ) : (\n                  <p>Registration status: FALSE</p>\n                )}\n              </div>\n            </div>\n          ) : null}\n\n          {buttonStatus.authClicked && authStatus.auth_button_clicked ? (\n            <div class=\"card1\">\n              <h4>Starting authentication process</h4>\n              <div class=\"card2\">\n                <h5>Request from device to gateway</h5>\n                <p>Device ID: {keyPair.devId}</p>\n                <p>\n                  Timestamp of the request:{\" \"}\n                  {authStatus.ts1 ? authStatus.ts1 : null}\n                </p>\n                <p>\n                  Cipher text:{\" \"}\n                  {authStatus.ct1 ? authStatus.ct1.substring(0, 40) : null}\n                </p>\n              </div>\n\n              <div class=\"card2\">\n                <h5>lbr response</h5>\n                {\n                  <div>\n                    <p>\n                      Received cipher text:{\" \"}\n                      {authStatus.res1 ? (\n                        authStatus.res1.substring(0, 40)\n                      ) : (\n                        <>Waiting...</>\n                      )}\n                    </p>\n                    <p>After decrypting: </p>\n                    {authStatus.data ? (\n                      <div>\n                        <p>\n                          Timestamp of the response:{\" \"}\n                          {authStatus.data.time_stamp}\n                        </p>\n                        <p>\n                          Signature (r, s): ( r:{\" \"}\n                          {authStatus.data.sign.r.substring(0, 40)}, s:{\" \"}\n                          {authStatus.data.sign.s.substring(0, 40)} )\n                        </p>\n                        {/* <p>Nonce received: {authStatus.data.nonce}</p> */}\n                      </div>\n                    ) : (\n                      <p>Waiting...</p>\n                    )}\n                  </div>\n                }\n              </div>\n\n              {/* <div class = \"card2\">\n            <h5>Device sending signed and encrypted nonce</h5>\n            <p>Device ID: {keyPair.devId}</p>\n            {\n              (authStatus.data2) ?\n              <div>\n                <p>Signing the nonce: {authStatus.data.nonce}</p>\n                <p>Device signature(r, s): ( r: {authStatus.data2.sign.r.substring(0,40)}, s: {authStatus.data2.sign.s.substring(0,40)} )</p>\n              </div>:\n              <p>Preparing response</p>\n            }\n            <p>Cipher text: {(authStatus.ct2) ? authStatus.ct2.substring(0,40) : null}</p>\n          </div> */}\n              {authStatus.res1 ? (\n                <div class=\"card2\">\n                  {!authStatus.res ? (\n                    <h5>Authentication successful!!</h5>\n                  ) : (\n                    <h5>Authentication failed :(</h5>\n                  )}\n                </div>\n              ) : null}\n            </div>\n          ) : null}\n\n          {commStatus.comm_button_clicked ? (\n            <div class=\"card1\">\n              <p>Starting authenticated routing process</p>\n\n              <div class=\"card2\">\n                <h5>Request from device to lbr</h5>\n                <p>Device ID: {keyPair.devId}</p>\n                <p>\n                  Timestamp of the request:{\" \"}\n                  {authStatus.ts1 ? authStatus.ts1 : null}\n                </p>\n                <p>\n                  Receiver's device id:{\" \"}\n                  {commStatus.devID ? commStatus.devID : null}\n                </p>\n                <p>\n                  Cipher text:{\" \"}\n                  {authStatus.ct1 ? authStatus.ct1.substring(0, 40) : null}\n                </p>\n              </div>\n\n              <div class=\"card2\">\n                <h5>Gateway response</h5>\n                <p>\n                  Received cipher text:{\" \"}\n                  {authStatus.res1 ? (\n                    authStatus.res1.substring(0, 40)\n                  ) : (\n                    <>Waiting...</>\n                  )}\n                </p>\n                <p>After decrypting: </p>\n                {authStatus.data ? (\n                  <div>\n                    <p>\n                      Timestamp of the response: {authStatus.data.time_stamp}\n                    </p>\n                    <p>\n                      Signature (r, s): ( r:{\" \"}\n                      {authStatus.data.sign.r.substring(0, 40)}, s:{\" \"}\n                      {authStatus.data.sign.s.substring(0, 40)} )\n                    </p>\n                    <p>Nonce received: {authStatus.data.nonce}</p>\n                    {authStatus.data.recvKey &&\n                    authStatus.data.recvKey.length > 0 ? (\n                      <p>Receiver public key: {authStatus.data.recvKey}</p>\n                    ) : (\n                      \"Error! Receiver is not registered!!\"\n                    )}\n                  </div>\n                ) : (\n                  <p>Waiting...</p>\n                )}\n              </div>\n            </div>\n          ) : null}\n\n\n        </div>\n\n        {\n          <div class=\"card3\">\n            <div className=\"recipientID\">\n              <p>Recipient deviceID: </p>\n              <input\n                type=\"text\"\n                placeholder=\"deviceID\"\n                onChange={onDevId}\n                value={commStatus.devID}\n              />\n            </div>\n            <br></br>\n\n            <Button\n              id=\"button6\"\n              style={{ width: \"100px\" }}\n              onClick={handleAuth}\n              disabled={false}\n            >\n              <span class=\"front\">Show Route</span>\n            </Button>\n          </div>\n        }\n      </div>\n      <img src={desktopMonitor} id=\"img123\" width=\"800\" height=\"80\" />\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":1,"column":17,"nodeType":"72","messageId":"73","endLine":1,"endColumn":26},{"ruleId":"70","severity":1,"message":"74","line":2,"column":8,"nodeType":"72","messageId":"73","endLine":2,"endColumn":12},{"ruleId":"70","severity":1,"message":"75","line":5,"column":10,"nodeType":"72","messageId":"73","endLine":5,"endColumn":21},{"ruleId":"70","severity":1,"message":"76","line":9,"column":3,"nodeType":"72","messageId":"73","endLine":9,"endColumn":12},{"ruleId":"70","severity":1,"message":"77","line":10,"column":3,"nodeType":"72","messageId":"73","endLine":10,"endColumn":6},{"ruleId":"70","severity":1,"message":"78","line":11,"column":3,"nodeType":"72","messageId":"73","endLine":11,"endColumn":6},{"ruleId":"70","severity":1,"message":"79","line":12,"column":3,"nodeType":"72","messageId":"73","endLine":12,"endColumn":12},{"ruleId":"70","severity":1,"message":"80","line":13,"column":3,"nodeType":"72","messageId":"73","endLine":13,"endColumn":16},{"ruleId":"70","severity":1,"message":"81","line":14,"column":3,"nodeType":"72","messageId":"73","endLine":14,"endColumn":7},{"ruleId":"70","severity":1,"message":"82","line":16,"column":8,"nodeType":"72","messageId":"73","endLine":16,"endColumn":20},{"ruleId":"70","severity":1,"message":"83","line":27,"column":5,"nodeType":"72","messageId":"73","endLine":27,"endColumn":12},{"ruleId":"70","severity":1,"message":"84","line":28,"column":5,"nodeType":"72","messageId":"73","endLine":28,"endColumn":15},{"ruleId":"70","severity":1,"message":"85","line":39,"column":10,"nodeType":"72","messageId":"73","endLine":39,"endColumn":17},{"ruleId":"70","severity":1,"message":"86","line":121,"column":10,"nodeType":"72","messageId":"73","endLine":121,"endColumn":16},{"ruleId":"70","severity":1,"message":"87","line":121,"column":18,"nodeType":"72","messageId":"73","endLine":121,"endColumn":27},{"ruleId":"70","severity":1,"message":"88","line":122,"column":10,"nodeType":"72","messageId":"73","endLine":122,"endColumn":19},{"ruleId":"70","severity":1,"message":"89","line":122,"column":21,"nodeType":"72","messageId":"73","endLine":122,"endColumn":33},{"ruleId":"70","severity":1,"message":"90","line":526,"column":12,"nodeType":"72","messageId":"73","endLine":526,"endColumn":27},{"ruleId":"70","severity":1,"message":"91","line":556,"column":12,"nodeType":"72","messageId":"73","endLine":556,"endColumn":17},{"ruleId":"92","severity":1,"message":"93","line":565,"column":9,"nodeType":"94","endLine":565,"endColumn":53},{"ruleId":"92","severity":1,"message":"93","line":826,"column":7,"nodeType":"94","endLine":826,"endColumn":71},{"ruleId":"70","severity":1,"message":"71","line":1,"column":17,"nodeType":"72","messageId":"73","endLine":1,"endColumn":26},{"ruleId":"70","severity":1,"message":"74","line":2,"column":8,"nodeType":"72","messageId":"73","endLine":2,"endColumn":12},{"ruleId":"70","severity":1,"message":"75","line":5,"column":10,"nodeType":"72","messageId":"73","endLine":5,"endColumn":21},{"ruleId":"70","severity":1,"message":"76","line":9,"column":3,"nodeType":"72","messageId":"73","endLine":9,"endColumn":12},{"ruleId":"70","severity":1,"message":"77","line":10,"column":3,"nodeType":"72","messageId":"73","endLine":10,"endColumn":6},{"ruleId":"70","severity":1,"message":"78","line":11,"column":3,"nodeType":"72","messageId":"73","endLine":11,"endColumn":6},{"ruleId":"70","severity":1,"message":"79","line":12,"column":3,"nodeType":"72","messageId":"73","endLine":12,"endColumn":12},{"ruleId":"70","severity":1,"message":"80","line":13,"column":3,"nodeType":"72","messageId":"73","endLine":13,"endColumn":16},{"ruleId":"70","severity":1,"message":"81","line":14,"column":3,"nodeType":"72","messageId":"73","endLine":14,"endColumn":7},{"ruleId":"70","severity":1,"message":"82","line":16,"column":8,"nodeType":"72","messageId":"73","endLine":16,"endColumn":20},{"ruleId":"70","severity":1,"message":"83","line":27,"column":5,"nodeType":"72","messageId":"73","endLine":27,"endColumn":12},{"ruleId":"70","severity":1,"message":"84","line":28,"column":5,"nodeType":"72","messageId":"73","endLine":28,"endColumn":15},{"ruleId":"70","severity":1,"message":"85","line":39,"column":10,"nodeType":"72","messageId":"73","endLine":39,"endColumn":17},{"ruleId":"70","severity":1,"message":"86","line":121,"column":10,"nodeType":"72","messageId":"73","endLine":121,"endColumn":16},{"ruleId":"70","severity":1,"message":"87","line":121,"column":18,"nodeType":"72","messageId":"73","endLine":121,"endColumn":27},{"ruleId":"70","severity":1,"message":"88","line":122,"column":10,"nodeType":"72","messageId":"73","endLine":122,"endColumn":19},{"ruleId":"70","severity":1,"message":"89","line":122,"column":21,"nodeType":"72","messageId":"73","endLine":122,"endColumn":33},{"ruleId":"70","severity":1,"message":"90","line":526,"column":12,"nodeType":"72","messageId":"73","endLine":526,"endColumn":27},{"ruleId":"70","severity":1,"message":"91","line":556,"column":12,"nodeType":"72","messageId":"73","endLine":556,"endColumn":17},{"ruleId":"92","severity":1,"message":"93","line":565,"column":9,"nodeType":"94","endLine":565,"endColumn":53},{"ruleId":"92","severity":1,"message":"93","line":826,"column":7,"nodeType":"94","endLine":826,"endColumn":71},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","'useCallback' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'ListGroup' is defined but never used.","'ListGroupItem' is defined but never used.","'Form' is defined but never used.","'myBackground' is defined but never used.","'sendMsg' is assigned a value but never used.","'bogus_priv' is assigned a value but never used.","'encrypt' is defined but never used.","'toggle' is assigned a value but never used.","'setToggle' is assigned a value but never used.","'showRoute' is assigned a value but never used.","'setShowRoute' is assigned a value but never used.","'handleShowRoute' is defined but never used.","'onMsg' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]