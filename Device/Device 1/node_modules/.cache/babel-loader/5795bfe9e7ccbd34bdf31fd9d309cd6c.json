{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abhi\\\\Desktop\\\\etherium\\\\endproject\\\\Device\\\\Device 1\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport mqtt from \"mqtt\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Button from \"react-bootstrap/Button\";\nimport { Container, Row, Col, ListGroup, ListGroupItem, Form } from \"react-bootstrap\";\nimport myBackground from \"./background.jpg\";\nimport bgpLogo from \"./router.svg\";\nimport desktopMonitor from \"./desktop-monitor.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst elliptic = require(\"elliptic\");\n\nconst sha3 = require(\"js-sha3\");\n\nvar ecies = require(\"eciesjs\");\n\nconst ec = new elliptic.ec(\"secp256k1\");\nvar gateway1_pubKey = \"02d3846591c11ef39031b9dd7594de19d2d2f99dd512892e13840b855194432975\";\nvar client; //Instance to coimport React, { Component }  from 'react';\n\nvar sendMsg = \"HELLO\";\nvar bogus_priv = \"e6e1031b9eff10cd5b97a2f6a5ffc1d1d42e2ebd3eef6b050b8400259aaf3de1\";\n/*******************UTILITY FUNCTIONS*****************/\n\n/*\n'Encrypt' function receives 2 parameters:\n1. snd - An object\n2. pubK - public key of the receiver\n\nReturns the cipher string\n*/\n\nfunction encrypt(snd, pubK) {\n  //Uses receivers public key to encrypt.\n  let cipher = ecies.encrypt(pubK, Buffer.from(JSON.stringify(snd)));\n  let cipher_str = cipher.toString(\"hex\");\n  return cipher_str;\n}\n/*\n'Decrypt' function receives two parameters:\n1. rcv - Cipher text in the form of buffer.\n2. prvK - Own private key\n\nReturns the decrypted object\n*/\n\n\nfunction decrypt(rcv, prvK) {\n  //Uses own private key to decrypt.\n  let cipher_str = rcv.toString(); // console.log(\"Received - Encrypted message (String): \", cipher_str);\n\n  let cipher = Buffer.from(cipher_str, \"hex\"); // console.log(\"Received - Encrypted message (Buffer): \", cipher);\n\n  var rcv_data = ecies.decrypt(prvK, cipher).toString();\n  rcv_data = JSON.parse(rcv_data);\n  return rcv_data;\n}\n/*\n'sign_it' function\nParameters:\n1. prvK - Own private key\n2. Other parameters which are to be concatenated,\nhashed and then signed can be accessed through 'arguments'.\n\n\nReturns the signature object of the form:\n{\n  r:string,\n  s: string,\n  recover paramters: number\n}\n*/\n\n\nfunction sign_it(prvK) {\n  let msg = \"\";\n\n  for (let i = 1; i < arguments.length; i++) msg += arguments[i];\n\n  let msgHash = sha3.keccak256(msg);\n  let signature = ec.sign(msgHash, prvK, \"hex\", {\n    canonical: true\n  }); //The signature below consists of parameters 'r' and 's'.\n\n  let sign_str = JSON.parse(JSON.stringify(signature));\n  return sign_str;\n}\n/**\n'verify' function:\nParameters:\n1. signature - An object same as the type returned by 'sign_it'\n2. pubK - public key to be verified with.\n3. Other parameters which are to be concatenated and hashed can be accessed through 'arguments'.\n\nReturn: Boolean value indicating the authentcation status.\n*/\n\n\nfunction verify(signature, pubK) {\n  let pubKeyObj = ec.keyFromPublic(pubK, \"hex\");\n  let msg = \"\";\n\n  for (let i = 2; i < arguments.length; i++) msg += arguments[i];\n\n  let msgHash = sha3.keccak256(msg);\n  let auth_status = pubKeyObj.verify(msgHash, signature);\n  return auth_status;\n}\n/******************COMPONENT FUNCTION***********************/\n\n\nfunction App() {\n  _s();\n\n  // test code\n  useEffect(() => {\n    // CodePen JS code\n    var canvas = document.getElementById(\"canvas\");\n    var ctx = canvas.getContext(\"2d\");\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    var particles = [];\n    var particleCount = 100;\n\n    for (var i = 0; i < particleCount; i++) {\n      particles.push(new particle());\n    }\n\n    function particle() {\n      this.x = Math.random() * canvas.width;\n      this.y = Math.random() * canvas.height;\n      this.vx = Math.random() * 10 - 5;\n      this.vy = Math.random() * 10 - 5;\n      this.size = Math.random() * 5 + 1;\n      this.color = \"hsla(\" + parseInt(Math.random() * 360, 10) + \",100%,50%,0.7)\";\n    }\n\n    function draw() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      for (var i = 0; i < particles.length; i++) {\n        ctx.beginPath();\n        ctx.fillStyle = particles[i].color;\n        ctx.arc(particles[i].x, particles[i].y, particles[i].size, 0, Math.PI * 2, false);\n        ctx.fill();\n        particles[i].x += particles[i].vx;\n        particles[i].y += particles[i].vy;\n        if (particles[i].x < -50) particles[i].x = canvas.width + 50;\n        if (particles[i].y < -50) particles[i].y = canvas.height + 50;\n        if (particles[i].x > canvas.width + 50) particles[i].x = -50;\n        if (particles[i].y > canvas.height + 50) particles[i].y = -50;\n      }\n\n      requestAnimationFrame(draw);\n    }\n\n    draw(); // CodePen CSS code\n\n    document.body.style.background = \"#222\";\n    canvas.style.display = \"block\";\n  }, []); // test code \n\n  /***************INITILIAZING STATES********************/\n  //Set of keys\n\n  const [keyPair, setKeyPair] = useState({\n    pubKey: null,\n    privKey: null,\n    privKey_0x: null\n  });\n  const [toggle, setToggle] = useState(false);\n  const [showRoute, setShowRoute] = useState({\n    showRoute_button_clicked: false,\n    data: \"this is KSH\"\n  }); //This state stores the status of the device.\n\n  const [status, setStatus] = useState({\n    gen: false,\n    //Whether the keys have been generated.\n    start_button_clicked: false,\n    connected: false,\n    registered: false,\n    cur_time_stamp: null\n  });\n  const [regStatus, setReg] = useState({\n    reg_button_clicked: false,\n    req: null,\n    ct: null,\n    res: null\n  });\n  const [authStatus, setAuth] = useState({\n    auth_button_clicked: false,\n    ts1: null,\n    //Timestamp when the device is sending the authentication request\n    ct1: null,\n    //Cipher text when sending the request\n    res1: null,\n    //Nonce as cipher text sent by the gateway as response 1\n    res2: null,\n    //Authentication status as a cipher text as response 2 but not yet used\n    data: null,\n    //Nonce (and receivers public key) received from the gateway\n    //data2: null, //Data to be send after receiving the nonce (receiver's public key)\n    //ct2: null, // cipher text for data2\n    res: null //Authentication status as a boolean value\n\n  });\n  const [commStatus, setComm] = useState({\n    comm_button_clicked: false,\n    devID: \"\",\n    res: null,\n    //Whole message sent by gateway as cipher text\n    data: null,\n    //Decrypted form of Whole message\n    msg: null\n  });\n  const [buttonStatus, setButton] = useState({\n    keysClicked: false,\n    startClicked: false,\n    registerClicked: false,\n    authClicked: false,\n    showRouteClicked: false,\n    data: null\n  }); // const [msg_to_send, setMsg] = useState(\"\");\n\n  useEffect(() => {\n    console.log(\"Key pair changed: \", keyPair);\n  }, [keyPair]);\n  useEffect(() => {\n    console.log(\"Registration status changed: \", status.registered);\n  }, [status.registered]); // useEffect(() => {\n  //   console.log(\"Comm status has been changed: \", commStatus);\n  // }, [commStatus])\n\n  /***************GENERATE KEYS HANDLER********************/\n\n  function handleGenerate() {\n    console.log(\"Generating key pair...\"); //Creating public and private keys for the device.\n\n    var pair = ec.genKeyPair();\n    var priv = pair.getPrivate(\"hex\"); // var priv = \"6b5be97bc9065592a6eb9444f90991ca32659673fb7307a44f6948193e7b44bf\";\n\n    var pub = ec.keyFromPrivate(priv).getPublic(true, \"hex\"); // var pub = \"0206fe0109380bb9fb59cfaf24c7db9626a9bed8d1ae3c89e50d2f7671e81ee023\";\n\n    var priv_0x = \"0x\" + priv;\n    var Id = sha3.keccak256(pub + gateway1_pubKey);\n    setKeyPair({\n      pubKey: pub,\n      privKey: priv,\n      privKey_0x: priv_0x,\n      devId: Id\n    });\n    setStatus(prev => ({ ...prev,\n      gen: true\n    }));\n    setButton(prev => ({ ...prev,\n      keysClicked: true,\n      startClicked: false,\n      registerClicked: false,\n      authClicked: false,\n      showRouteClicked: false\n    }));\n    let dat = new Date(\"2000-01-01\");\n    localStorage.setItem(\"cur_time_stamp\", dat.toString());\n    localStorage.setItem(\"old\", false);\n    localStorage.setItem(\"gate\", true);\n  }\n  /***************CONNECTING AND SUBSCRIBING TO MQTT AND MAIN LOGIC FOR RECEIVING MESSAGES AND REPSONDING********************/\n\n  /***** This handler connects the device to the broker and subscribes to listen for responses *****/\n  //   function respond_nonce(){\n  //   console.log(\"Wait...\");\n  // }\n\n\n  function handleStart() {\n    console.log(\"Device start button clicked...\");\n    setStatus(prev => ({ ...prev,\n      start_button_clicked: true\n    }));\n    setButton(prev => ({ ...prev,\n      keysClicked: false,\n      startClicked: true,\n      registerClicked: false,\n      authClicked: false,\n      showRouteClicked: false\n    }));\n    client = mqtt.connect(\"mqtt://test.mosquitto.org:8081\", {\n      protocol: \"mqtts\"\n    });\n    let data = {\n      privKey: keyPair.privKey\n    };\n    let cipher = ecies.encrypt(gateway1_pubKey, Buffer.from(JSON.stringify(data)));\n    let cipher_str = cipher.toString(\"hex\");\n    client.publish(\"gateway1/priv\", cipher_str);\n    client.on(\"connect\", () => {\n      /***************SUBSCRIBE TO DEVICE-ID********************/\n      client.subscribe(keyPair.devId, function (err) {\n        if (!err) {\n          console.log(\"Device started...\");\n          setStatus(prev => ({ ...prev,\n            connected: true\n          }));\n        } else {\n          console.log(\"Error starting the device...\");\n        }\n      });\n      /**********MESSAGE LISTENERS**************/\n\n      client.on(\"message\", (topic, rcv) => {\n        if (topic !== keyPair.devId) return;\n        var data = decrypt(rcv, keyPair.privKey_0x);\n        console.log(\"Gateway response received: \", data); // console.log(\"Current time stamp: \", localStorage.getItem('cur_time_stamp'));\n\n        /***********REGISTRATION LISTENER***********/\n\n        if (data.remark === \"register\") {\n          if (data.status) {\n            console.log(\"Device has been registered...Proceed for authentication!!\");\n            setStatus(prev => ({ ...prev,\n              registered: true\n            }));\n            setReg(prev => ({ ...prev,\n              res: true\n            }));\n          } else {\n            console.log(\"Error registering the device...\");\n          }\n        } else if (data.remark === \"nonce\") {\n          /***********NONCE LISTENER***********/\n          if (!data.status) {\n            console.log(\"Device not registered...\");\n            return;\n          }\n\n          if (data.recvKey) localStorage.setItem(\"recvKey\", data.recvKey);\n          setAuth(prev => ({ ...prev,\n            res1: rcv.toString(),\n            data: data\n          })); //We have received the nonce (and receivers public key)\n          //1. Check whether the timestamp is new.\n          //2. Check the gateway\n          //3. Hash the contents and sign it\n          //4. Encrypt with gateways public key and send.\n\n          let d1 = new Date(data.time_stamp);\n          let d2 = new Date(localStorage.getItem(\"cur_time_stamp\")); // console.log(\"d1: \", d1.toString(), \"\\nd2: \", d2.toString());\n          // 1.\n          // !status.cur_time_stamp\n\n          if (d1.getTime() > d2.getTime()) {//2.\n            // let pubKeyObj = ec.keyFromPublic(gateway1_pubKey,\"hex\");\n            // let msgHash = sha3.keccak256(data.time_stamp);\n            // // console.log(\"Message hash: \", msgHash);\n            // let auth_status = pubKeyObj.verify(msgHash, data.sign);\n            // if(auth_status)\n            // {\n            //   //3.\n            //   // console.log(\"The text message and receiver public key just before sending: \", localStorage.getItem('msg'), \" \", localStorage.getItem('recvKey'));\n            //   //export NODE_OPTIONS=--openssl-legacy-provider\n            //   let recvKey = localStorage.getItem('recvKey');\n            //   let msg = (localStorage.getItem('msg').length === 0) ? \"\" : encrypt(localStorage.getItem('msg'), recvKey);\n            //   // bogus_priv\n            //   let sign = sign_it(keyPair.privKey, data.nonce);\n            //   let snd = {\n            //   devId: keyPair.devId,\n            //   sign: sign,\n            //   msg:  msg,\n            //   }\n            //   console.log(\"Sending the message: \", snd);\n            //   let enc_data = encrypt(snd, gateway1_pubKey);\n            //   client.publish('gateway1/auth', enc_data);\n            //   //Update the timestamp state.\n            //   // setStatus((prev) => ({\n            //   //   ...prev,\n            //   //   cur_time_stamp:data.time_stamp\n            //   // }))\n            //   setAuth((prev) => ({\n            //     ...prev,\n            //     data2: snd,\n            //     ct2: enc_data,\n            //   }))\n            //   // localStorage.setItem('old', false);\n            //   localStorage.setItem('gate', true);\n            //   localStorage.setItem('cur_time_stamp', data.time_stamp);\n            //   // console.log(\"Current time stamp now: \", localStorage.getItem('cur_time_stamp'));\n            // }\n            //   else\n            //   {\n            //     console.log(\"Gateway signature verification failed...\");\n            //     setAuth((prev) => ({\n            //       ...prev,\n            //       data2: null,\n            //       ct2: null\n            //     }))\n            //     localStorage.setItem('gate', false);\n            //   }\n          } else {\n            console.log(\"Timestamp is old: \");\n            console.log(\"Latest timestamp stored: \", localStorage.getItem(\"cur_time_stamp\"));\n            console.log(\"Received time stamp: \", data.time_stamp);\n            setAuth(prev => ({ ...prev,\n              data2: null,\n              ct2: null\n            })); // localStorage.setItem('old', true);\n\n            localStorage.setItem(\"gate\", false);\n          }\n        } else if (data.remark === \"auth\") {\n          /***********AUTH LISTENER***********/\n          //This is the response from the gateway after processing the request.\n          //1. Check gateway.\n          //2. Check status.\n          let d1 = new Date(data.time_stamp);\n          let d2 = new Date(status.cur_time_stamp);\n\n          if (!status.cur_time_stamp || d1.getTime() > d2.getTime()) {\n            let pubKeyObj = ec.keyFromPublic(gateway1_pubKey, \"hex\");\n            let msgHash = sha3.keccak256(data.time_stamp);\n            let auth_status = pubKeyObj.verify(msgHash, data.sign);\n\n            if (auth_status) {\n              setAuth(prev => ({ ...prev,\n                res: data.status\n              }));\n              console.log(\"Auth status received: \", data.status);\n            } else console.log(\"Gateway signature verification failed...\");\n          } else console.log(\"Timestamp is old...\");\n        } else if (data.remark === \"message\") {\n          let d1 = new Date(data.time_stamp);\n          let d2 = new Date(status.cur_time_stamp);\n          console.log(\"Received a message: \", data.msg);\n\n          if (d1.getTime() > d2.getTime()) {\n            let auth_status = verify(data.sign, gateway1_pubKey, data.time_stamp);\n\n            if (auth_status) {\n              setStatus(prev => ({ ...prev,\n                cur_time_stamp: data.time_stamp\n              }));\n              setComm(prev => ({ ...commStatus,\n                res: rcv.toString(),\n                data: data,\n                enc: data.msg,\n                msg: decrypt(data.msg, keyPair.privKey_0x)\n              }));\n            } else {\n              console.log(\"Cannot verify gateway signature...\");\n            }\n          } else {\n            console.log(\"Timestamp is old...\");\n          }\n        }\n      });\n    });\n  }\n  /***************DEVICE REGISTRATION HANDLER********************/\n\n\n  function handleRegister() {\n    console.log(\"Requesting registration...\"); //The devID, PubKey encrypted with gateway public key is sent to the gateway on the topic register1.\n\n    let d = new Date();\n    let d_str = d.toString();\n    let sign = sign_it(keyPair.privKey, d_str);\n    let data = {\n      devId: keyPair.devId,\n      pubKey: keyPair.pubKey,\n      TS: d_str,\n      sign: sign\n    };\n    let cipher = ecies.encrypt(gateway1_pubKey, Buffer.from(JSON.stringify(data)));\n    let cipher_str = cipher.toString(\"hex\");\n    setReg(prev => ({ ...prev,\n      reg_button_clicked: true,\n      req: data,\n      ct: cipher_str\n    }));\n    setButton(prev => ({ ...prev,\n      keysClicked: false,\n      startClicked: false,\n      registerClicked: true,\n      authClicked: false,\n      showRouteClicked: false\n    }));\n    client.publish(\"gateway1/register\", cipher_str);\n  }\n  /***************DEVCE AUTHENTICATION HANDLER********************/\n\n\n  function handleAuth() {\n    //Here the device requests the gateway for authentication.\n    //The gateway responds by sending a nonce.\n    console.log(\"Requesting for authentication...\");\n    setAuth(prev => ({ ...prev,\n      auth_button_clicked: commStatus.devID.length === 0\n    }));\n    setComm(prev => ({ ...prev,\n      comm_button_clicked: commStatus.devID.length !== 0\n    }));\n    let d = new Date();\n    let d_str = d.toString();\n    let data = {\n      devId: keyPair.devId,\n      TS: d_str,\n      recvId: commStatus.devID.length !== 0 ? commStatus.devID : null\n    };\n    let cipher = ecies.encrypt(gateway1_pubKey, Buffer.from(JSON.stringify(data)));\n    let cipher_str = cipher.toString(\"hex\");\n    setAuth(prev => ({ ...prev,\n      ts1: d_str,\n      ct1: cipher_str\n    }));\n    setButton(prev => ({ ...prev,\n      keysClicked: false,\n      startClicked: false,\n      registerClicked: false,\n      authClicked: true,\n      showRouteClicked: false\n    })); //console.log(\"destdevice :\",commStatus.devID);\n\n    client.publish(\"gateway1/nonce\", cipher_str);\n  }\n\n  function handleShowRoute() {\n    setButton(prev => ({ ...prev,\n      keysClicked: false,\n      startClicked: false,\n      registerClicked: false,\n      authClicked: false,\n      showRouteClicked: true\n    }));\n    setComm(prev => ({ ...prev,\n      comm_button_clicked: commStatus.devID.length !== 0\n    }));\n    return;\n  }\n\n  function onDevId(e) {\n    const inputValue = e.target.value;\n\n    if (inputValue.trim() === \"\") {\n      console.log(\"Input value is empty\");\n    } else {\n      console.log(\"Input value is not empty\");\n    }\n\n    setComm(prev => ({ ...prev,\n      devID: e.target.value\n    }));\n  }\n\n  function onMsg(e) {\n    // setMsg((prev) => (e.target.value));\n    localStorage.setItem(\"msg\", e.target.value);\n  }\n  /************************COMPONENT TO BE RENDERED*****************************/\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"page-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: bgpLogo,\n        height: \"45\",\n        width: \"45\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" BGP Device \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 620,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"page-border\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"parent\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          className: \"button\",\n          id: \"button1\",\n          onClick: handleGenerate,\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"front\",\n            children: \" Keys \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 630,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"vertical\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"button\",\n          id: \"button2\",\n          onClick: handleStart,\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"front\",\n            children: \"Start the device \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 635,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 633,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"vertical\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"button\",\n          id: \"button3\",\n          onClick: handleRegister,\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"front\",\n            children: \" Register \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"vertical\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"button\",\n          id: \"button4\",\n          onClick: handleAuth,\n          disabled: false,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"front\",\n            children: \"Authenticate \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"cards\",\n        children: [!buttonStatus.keysClicked && !buttonStatus.startClicked && !buttonStatus.registerClicked && !buttonStatus.authClicked && !buttonStatus.showRouteClicked ? /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card1\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"swift-up-text\",\n            children: \" Hi, Welcome to BGP simulation \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 660,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), buttonStatus.keysClicked && keyPair.privKey ? /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card1\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            class: \"swift-up-text\",\n            children: \" >> Keys \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 668,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"swift-up-text\",\n            children: [\"Device Id: \", keyPair.devId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 670,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"swift-up-text\",\n            children: [\"Public key: \", keyPair.pubKey]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"swift-up-text\",\n            children: [\"Private key: \", keyPair.privKey]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 672,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), buttonStatus.startClicked && status.start_button_clicked ? /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card1\",\n          children: !status.connected ? /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \" Connecting to broker\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 681,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Device Ready!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 683,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 13\n        }, this) : null, buttonStatus.registerClicked && regStatus.reg_button_clicked ? /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card1\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Requesting registration...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"card2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Device to gateway\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 692,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Device ID: \", keyPair.devId]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 693,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Public key: \", keyPair.pubKey]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 694,\n              columnNumber: 17\n            }, this), regStatus.req ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Timestamp of the request: \", regStatus.req.TS]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 697,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Signature (r, s): ( r:\", \" \", regStatus.req.sign.r.substring(0, 40), \", s:\", \" \", regStatus.req.sign.s.substring(0, 40), \" )\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 698,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 696,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Signing...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 705,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Encrypted request:\", \" \", regStatus.ct ? regStatus.ct.substring(0, 40) + \"...\" : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 707,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"card2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Gateway to device\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 714,\n              columnNumber: 17\n            }, this), status.registered ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Registration status: TRUE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 716,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Registration status: FALSE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 718,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 713,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 13\n        }, this) : null, buttonStatus.authClicked && authStatus.auth_button_clicked ? /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card1\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Starting authentication process\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 726,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"card2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Request from device to gateway\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 728,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Device ID: \", keyPair.devId]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 729,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Timestamp of the request:\", \" \", authStatus.ts1 ? authStatus.ts1 : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 730,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Cipher text:\", \" \", authStatus.ct1 ? authStatus.ct1.substring(0, 40) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 734,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 727,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"card2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"lbr response\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 741,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Received cipher text:\", \" \", authStatus.res1 ? authStatus.res1.substring(0, 40) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: \"Waiting...\"\n                }, void 0, false)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 744,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"After decrypting: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 752,\n                columnNumber: 21\n              }, this), authStatus.data ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Timestamp of the response:\", \" \", authStatus.data.time_stamp]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 755,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"Signature (r, s): ( r:\", \" \", authStatus.data.sign.r.substring(0, 40), \", s:\", \" \", authStatus.data.sign.s.substring(0, 40), \" )\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 759,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 754,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Waiting...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 767,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 743,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 740,\n            columnNumber: 15\n          }, this), authStatus.res1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"card2\",\n            children: !authStatus.res ? /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Authentication successful!!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 789,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Authentication failed :(\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 791,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 787,\n            columnNumber: 17\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 725,\n          columnNumber: 13\n        }, this) : null, commStatus.comm_button_clicked ? /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card1\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Starting authenticated routing process\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 800,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"card2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Request from device to lbr\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 803,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Device ID: \", keyPair.devId]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 804,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Timestamp of the request:\", \" \", authStatus.ts1 ? authStatus.ts1 : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 805,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Receiver's device id:\", \" \", commStatus.devID ? commStatus.devID : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 809,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Cipher text:\", \" \", authStatus.ct1 ? authStatus.ct1.substring(0, 40) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 813,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 802,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"card2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Gateway response\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 820,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Received cipher text:\", \" \", authStatus.res1 ? authStatus.res1.substring(0, 40) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: \"Waiting...\"\n              }, void 0, false)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 821,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"After decrypting: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 829,\n              columnNumber: 17\n            }, this), authStatus.data ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Timestamp of the response: \", authStatus.data.time_stamp]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 832,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Signature (r, s): ( r:\", \" \", authStatus.data.sign.r.substring(0, 40), \", s:\", \" \", authStatus.data.sign.s.substring(0, 40), \" )\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 835,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Nonce received: \", authStatus.data.nonce]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 840,\n                columnNumber: 21\n              }, this), authStatus.data.recvKey && authStatus.data.recvKey.length > 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Receiver public key: \", authStatus.data.recvKey]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 843,\n                columnNumber: 23\n              }, this) : \"Error! Receiver is not registered!!\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 831,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Waiting...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 849,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 819,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 799,\n          columnNumber: 13\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 653,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"card3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"recipientID\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Recipient deviceID: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 861,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"deviceID\",\n            onChange: onDevId,\n            value: commStatus.devID\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 862,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 860,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 869,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          id: \"button6\",\n          style: {\n            width: \"100px\"\n          },\n          onClick: handleAuth,\n          disabled: false,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"front\",\n            children: \"Show Route\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 877,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 871,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 859,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 626,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: desktopMonitor,\n      id: \"img123\",\n      width: \"800\",\n      height: \"80\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 882,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 619,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"c3oUpIx+DwYHjG8YQH/1jexRzR8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/abhi/Desktop/etherium/endproject/Device/Device 1/src/App.js"],"names":["React","Component","mqtt","useCallback","useEffect","useState","Button","Container","Row","Col","ListGroup","ListGroupItem","Form","myBackground","elliptic","require","sha3","ecies","ec","gateway1_pubKey","client","sendMsg","bogus_priv","encrypt","snd","pubK","cipher","Buffer","from","JSON","stringify","cipher_str","toString","decrypt","rcv","prvK","rcv_data","parse","sign_it","msg","i","arguments","length","msgHash","keccak256","signature","sign","canonical","sign_str","verify","pubKeyObj","keyFromPublic","auth_status","App","canvas","document","getElementById","ctx","getContext","width","window","innerWidth","height","innerHeight","particles","particleCount","push","particle","x","Math","random","y","vx","vy","size","color","parseInt","draw","clearRect","beginPath","fillStyle","arc","PI","fill","requestAnimationFrame","body","style","background","display","keyPair","setKeyPair","pubKey","privKey","privKey_0x","toggle","setToggle","showRoute","setShowRoute","showRoute_button_clicked","data","status","setStatus","gen","start_button_clicked","connected","registered","cur_time_stamp","regStatus","setReg","reg_button_clicked","req","ct","res","authStatus","setAuth","auth_button_clicked","ts1","ct1","res1","res2","commStatus","setComm","comm_button_clicked","devID","buttonStatus","setButton","keysClicked","startClicked","registerClicked","authClicked","showRouteClicked","console","log","handleGenerate","pair","genKeyPair","priv","getPrivate","pub","keyFromPrivate","getPublic","priv_0x","Id","devId","prev","dat","Date","localStorage","setItem","handleStart","connect","protocol","publish","on","subscribe","err","topic","remark","recvKey","d1","time_stamp","d2","getItem","getTime","data2","ct2","enc","handleRegister","d","d_str","TS","handleAuth","recvId","handleShowRoute","onDevId","e","inputValue","target","value","trim","onMsg","bgpLogo","r","substring","s","nonce","desktopMonitor"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport mqtt from \"mqtt\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Button from \"react-bootstrap/Button\";\nimport {\n  Container,\n  Row,\n  Col,\n  ListGroup,\n  ListGroupItem,\n  Form,\n} from \"react-bootstrap\";\nimport myBackground from \"./background.jpg\";\nimport bgpLogo from \"./router.svg\";\nimport desktopMonitor from \"./desktop-monitor.svg\";\n\nconst elliptic = require(\"elliptic\");\nconst sha3 = require(\"js-sha3\");\nvar ecies = require(\"eciesjs\");\nconst ec = new elliptic.ec(\"secp256k1\");\nvar gateway1_pubKey =\n  \"02d3846591c11ef39031b9dd7594de19d2d2f99dd512892e13840b855194432975\";\nvar client; //Instance to coimport React, { Component }  from 'react';\nvar sendMsg = \"HELLO\";\nvar bogus_priv =\n  \"e6e1031b9eff10cd5b97a2f6a5ffc1d1d42e2ebd3eef6b050b8400259aaf3de1\";\n\n/*******************UTILITY FUNCTIONS*****************/\n/*\n'Encrypt' function receives 2 parameters:\n1. snd - An object\n2. pubK - public key of the receiver\n\nReturns the cipher string\n*/\nfunction encrypt(snd, pubK) {\n  //Uses receivers public key to encrypt.\n  let cipher = ecies.encrypt(pubK, Buffer.from(JSON.stringify(snd)));\n  let cipher_str = cipher.toString(\"hex\");\n  return cipher_str;\n}\n\n/*\n'Decrypt' function receives two parameters:\n1. rcv - Cipher text in the form of buffer.\n2. prvK - Own private key\n\nReturns the decrypted object\n*/\nfunction decrypt(rcv, prvK) {\n  //Uses own private key to decrypt.\n  let cipher_str = rcv.toString();\n  // console.log(\"Received - Encrypted message (String): \", cipher_str);\n  let cipher = Buffer.from(cipher_str, \"hex\");\n  // console.log(\"Received - Encrypted message (Buffer): \", cipher);\n  var rcv_data = ecies.decrypt(prvK, cipher).toString();\n  rcv_data = JSON.parse(rcv_data);\n  return rcv_data;\n}\n\n/*\n'sign_it' function\nParameters:\n1. prvK - Own private key\n2. Other parameters which are to be concatenated,\nhashed and then signed can be accessed through 'arguments'.\n\n\nReturns the signature object of the form:\n{\n  r:string,\n  s: string,\n  recover paramters: number\n}\n*/\n\nfunction sign_it(prvK) {\n  let msg = \"\";\n  for (let i = 1; i < arguments.length; i++) msg += arguments[i];\n  let msgHash = sha3.keccak256(msg);\n  let signature = ec.sign(msgHash, prvK, \"hex\", { canonical: true });\n\n  //The signature below consists of parameters 'r' and 's'.\n  let sign_str = JSON.parse(JSON.stringify(signature));\n  return sign_str;\n}\n\n/**\n'verify' function:\nParameters:\n1. signature - An object same as the type returned by 'sign_it'\n2. pubK - public key to be verified with.\n3. Other parameters which are to be concatenated and hashed can be accessed through 'arguments'.\n\nReturn: Boolean value indicating the authentcation status.\n*/\nfunction verify(signature, pubK) {\n  let pubKeyObj = ec.keyFromPublic(pubK, \"hex\");\n\n  let msg = \"\";\n  for (let i = 2; i < arguments.length; i++) msg += arguments[i];\n  let msgHash = sha3.keccak256(msg);\n\n  let auth_status = pubKeyObj.verify(msgHash, signature);\n\n  return auth_status;\n}\n/******************COMPONENT FUNCTION***********************/\nfunction App() {\n\n  // test code\n    useEffect(() => {\n    // CodePen JS code\n    var canvas = document.getElementById(\"canvas\");\n    var ctx = canvas.getContext(\"2d\");\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    var particles = [];\n    var particleCount = 100;\n\n    for (var i = 0; i < particleCount; i++) {\n      particles.push(new particle());\n    }\n\n    function particle() {\n      this.x = Math.random() * canvas.width;\n      this.y = Math.random() * canvas.height;\n      this.vx = Math.random() * 10 - 5;\n      this.vy = Math.random() * 10 - 5;\n      this.size = Math.random() * 5 + 1;\n      this.color = \"hsla(\" + parseInt(Math.random() * 360, 10) + \",100%,50%,0.7)\";\n    }\n\n    function draw() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      for (var i = 0; i < particles.length; i++) {\n        ctx.beginPath();\n        ctx.fillStyle = particles[i].color;\n        ctx.arc(particles[i].x, particles[i].y, particles[i].size, 0, Math.PI * 2, false);\n        ctx.fill();\n\n        particles[i].x += particles[i].vx;\n        particles[i].y += particles[i].vy;\n\n        if (particles[i].x < -50) particles[i].x = canvas.width + 50;\n        if (particles[i].y < -50) particles[i].y = canvas.height + 50;\n        if (particles[i].x > canvas.width + 50) particles[i].x = -50;\n        if (particles[i].y > canvas.height + 50) particles[i].y = -50;\n      }\n      requestAnimationFrame(draw);\n    }\n\n    draw();\n\n    // CodePen CSS code\n    document.body.style.background = \"#222\";\n    canvas.style.display = \"block\";\n  }, []);\n\n\n\n\n  // test code \n\n\n  /***************INITILIAZING STATES********************/\n  //Set of keys\n  const [keyPair, setKeyPair] = useState({\n    pubKey: null,\n    privKey: null,\n    privKey_0x: null,\n  });\n\n  const [toggle, setToggle] = useState(false);\n  const [showRoute, setShowRoute] = useState({\n    showRoute_button_clicked: false,\n    data: \"this is KSH\"\n  });\n\n  //This state stores the status of the device.\n  const [status, setStatus] = useState({\n    gen: false, //Whether the keys have been generated.\n    start_button_clicked: false,\n    connected: false,\n    registered: false,\n    cur_time_stamp: null,\n  });\n\n  const [regStatus, setReg] = useState({\n    reg_button_clicked: false,\n    req: null,\n    ct: null,\n    res: null,\n  });\n\n  const [authStatus, setAuth] = useState({\n    auth_button_clicked: false,\n    ts1: null, //Timestamp when the device is sending the authentication request\n    ct1: null, //Cipher text when sending the request\n    res1: null, //Nonce as cipher text sent by the gateway as response 1\n    res2: null, //Authentication status as a cipher text as response 2 but not yet used\n    data: null, //Nonce (and receivers public key) received from the gateway\n    //data2: null, //Data to be send after receiving the nonce (receiver's public key)\n    //ct2: null, // cipher text for data2\n    res: null, //Authentication status as a boolean value\n  });\n\n  const [commStatus, setComm] = useState({\n    comm_button_clicked: false,\n    devID: \"\",\n    res: null, //Whole message sent by gateway as cipher text\n    data: null, //Decrypted form of Whole message\n    msg: null,\n  });\n\n  const [buttonStatus, setButton] = useState({\n    keysClicked: false,\n    startClicked: false,\n    registerClicked: false,\n    authClicked: false,\n    showRouteClicked: false,\n    data: null,\n  });\n\n  // const [msg_to_send, setMsg] = useState(\"\");\n\n  useEffect(() => {\n    console.log(\"Key pair changed: \", keyPair);\n  }, [keyPair]);\n\n  useEffect(() => {\n    console.log(\"Registration status changed: \", status.registered);\n  }, [status.registered]);\n\n  // useEffect(() => {\n  //   console.log(\"Comm status has been changed: \", commStatus);\n  // }, [commStatus])\n\n  /***************GENERATE KEYS HANDLER********************/\n  function handleGenerate() {\n    console.log(\"Generating key pair...\");\n\n    //Creating public and private keys for the device.\n    var pair = ec.genKeyPair();\n    var priv = pair.getPrivate(\"hex\");\n    // var priv = \"6b5be97bc9065592a6eb9444f90991ca32659673fb7307a44f6948193e7b44bf\";\n    var pub = ec.keyFromPrivate(priv).getPublic(true, \"hex\");\n    // var pub = \"0206fe0109380bb9fb59cfaf24c7db9626a9bed8d1ae3c89e50d2f7671e81ee023\";\n\n    var priv_0x = \"0x\" + priv;\n    var Id = sha3.keccak256(pub + gateway1_pubKey);\n\n    setKeyPair({\n      pubKey: pub,\n      privKey: priv,\n      privKey_0x: priv_0x,\n      devId: Id,\n    });\n\n    setStatus((prev) => ({\n      ...prev,\n      gen: true,\n    }));\n\n    setButton((prev) => ({\n      ...prev,\n      keysClicked: true,\n      startClicked: false,\n      registerClicked: false,\n      authClicked: false,\n      showRouteClicked: false\n    }));\n\n    let dat = new Date(\"2000-01-01\");\n    localStorage.setItem(\"cur_time_stamp\", dat.toString());\n    localStorage.setItem(\"old\", false);\n    localStorage.setItem(\"gate\", true);\n  }\n\n  /***************CONNECTING AND SUBSCRIBING TO MQTT AND MAIN LOGIC FOR RECEIVING MESSAGES AND REPSONDING********************/\n\n  /***** This handler connects the device to the broker and subscribes to listen for responses *****/\n\n  //   function respond_nonce(){\n  //   console.log(\"Wait...\");\n  // }\n\n  function handleStart() {\n    console.log(\"Device start button clicked...\");\n    setStatus((prev) => ({\n      ...prev,\n      start_button_clicked: true,\n    }));\n\n    setButton((prev) => ({\n      ...prev,\n      keysClicked: false,\n      startClicked: true,\n      registerClicked: false,\n      authClicked: false,\n      showRouteClicked: false\n    }));\n\n    client = mqtt.connect(\"mqtt://test.mosquitto.org:8081\", {\n      protocol: \"mqtts\",\n    });\n    let data = {\n      privKey: keyPair.privKey,\n    };\n    let cipher = ecies.encrypt(\n      gateway1_pubKey,\n      Buffer.from(JSON.stringify(data))\n    );\n    let cipher_str = cipher.toString(\"hex\");\n    client.publish(\"gateway1/priv\", cipher_str);\n    client.on(\"connect\", () => {\n      /***************SUBSCRIBE TO DEVICE-ID********************/\n      client.subscribe(keyPair.devId, function (err) {\n        if (!err) {\n          console.log(\"Device started...\");\n          setStatus((prev) => ({\n            ...prev,\n            connected: true,\n          }));\n        } else {\n          console.log(\"Error starting the device...\");\n        }\n      });\n\n      /**********MESSAGE LISTENERS**************/\n      client.on(\"message\", (topic, rcv) => {\n        if (topic !== keyPair.devId) return;\n\n        var data = decrypt(rcv, keyPair.privKey_0x);\n        console.log(\"Gateway response received: \", data);\n        // console.log(\"Current time stamp: \", localStorage.getItem('cur_time_stamp'));\n\n        /***********REGISTRATION LISTENER***********/\n        if (data.remark === \"register\") {\n          if (data.status) {\n            console.log(\n              \"Device has been registered...Proceed for authentication!!\"\n            );\n            setStatus((prev) => ({\n              ...prev,\n              registered: true,\n            }));\n            setReg((prev) => ({\n              ...prev,\n              res: true,\n            }));\n          } else {\n            console.log(\"Error registering the device...\");\n          }\n        } else if (data.remark === \"nonce\") {\n          /***********NONCE LISTENER***********/\n          if (!data.status) {\n            console.log(\"Device not registered...\");\n            return;\n          }\n          if (data.recvKey) localStorage.setItem(\"recvKey\", data.recvKey);\n          setAuth((prev) => ({\n            ...prev,\n            res1: rcv.toString(),\n            data: data,\n          }));\n\n          //We have received the nonce (and receivers public key)\n          //1. Check whether the timestamp is new.\n          //2. Check the gateway\n          //3. Hash the contents and sign it\n          //4. Encrypt with gateways public key and send.\n          let d1 = new Date(data.time_stamp);\n          let d2 = new Date(localStorage.getItem(\"cur_time_stamp\"));\n\n          // console.log(\"d1: \", d1.toString(), \"\\nd2: \", d2.toString());\n\n          // 1.\n          // !status.cur_time_stamp\n          if (d1.getTime() > d2.getTime()) {\n            //2.\n            // let pubKeyObj = ec.keyFromPublic(gateway1_pubKey,\"hex\");\n            // let msgHash = sha3.keccak256(data.time_stamp);\n            // // console.log(\"Message hash: \", msgHash);\n            // let auth_status = pubKeyObj.verify(msgHash, data.sign);\n            // if(auth_status)\n            // {\n            //   //3.\n            //   // console.log(\"The text message and receiver public key just before sending: \", localStorage.getItem('msg'), \" \", localStorage.getItem('recvKey'));\n            //   //export NODE_OPTIONS=--openssl-legacy-provider\n            //   let recvKey = localStorage.getItem('recvKey');\n            //   let msg = (localStorage.getItem('msg').length === 0) ? \"\" : encrypt(localStorage.getItem('msg'), recvKey);\n            //   // bogus_priv\n            //   let sign = sign_it(keyPair.privKey, data.nonce);\n            //   let snd = {\n            //   devId: keyPair.devId,\n            //   sign: sign,\n            //   msg:  msg,\n            //   }\n            //   console.log(\"Sending the message: \", snd);\n            //   let enc_data = encrypt(snd, gateway1_pubKey);\n            //   client.publish('gateway1/auth', enc_data);\n            //   //Update the timestamp state.\n            //   // setStatus((prev) => ({\n            //   //   ...prev,\n            //   //   cur_time_stamp:data.time_stamp\n            //   // }))\n            //   setAuth((prev) => ({\n            //     ...prev,\n            //     data2: snd,\n            //     ct2: enc_data,\n            //   }))\n            //   // localStorage.setItem('old', false);\n            //   localStorage.setItem('gate', true);\n            //   localStorage.setItem('cur_time_stamp', data.time_stamp);\n            //   // console.log(\"Current time stamp now: \", localStorage.getItem('cur_time_stamp'));\n            // }\n            //   else\n            //   {\n            //     console.log(\"Gateway signature verification failed...\");\n            //     setAuth((prev) => ({\n            //       ...prev,\n            //       data2: null,\n            //       ct2: null\n            //     }))\n            //     localStorage.setItem('gate', false);\n            //   }\n          } else {\n            console.log(\"Timestamp is old: \");\n            console.log(\n              \"Latest timestamp stored: \",\n              localStorage.getItem(\"cur_time_stamp\")\n            );\n            console.log(\"Received time stamp: \", data.time_stamp);\n            setAuth((prev) => ({\n              ...prev,\n              data2: null,\n              ct2: null,\n            }));\n            // localStorage.setItem('old', true);\n            localStorage.setItem(\"gate\", false);\n          }\n        } else if (data.remark === \"auth\") {\n          /***********AUTH LISTENER***********/\n          //This is the response from the gateway after processing the request.\n          //1. Check gateway.\n          //2. Check status.\n          let d1 = new Date(data.time_stamp);\n          let d2 = new Date(status.cur_time_stamp);\n          if (!status.cur_time_stamp || d1.getTime() > d2.getTime()) {\n            let pubKeyObj = ec.keyFromPublic(gateway1_pubKey, \"hex\");\n            let msgHash = sha3.keccak256(data.time_stamp);\n            let auth_status = pubKeyObj.verify(msgHash, data.sign);\n            if (auth_status) {\n              setAuth((prev) => ({\n                ...prev,\n                res: data.status,\n              }));\n              console.log(\"Auth status received: \", data.status);\n            } else console.log(\"Gateway signature verification failed...\");\n          } else console.log(\"Timestamp is old...\");\n        } else if (data.remark === \"message\") {\n          let d1 = new Date(data.time_stamp);\n          let d2 = new Date(status.cur_time_stamp);\n          console.log(\"Received a message: \", data.msg);\n          if (d1.getTime() > d2.getTime()) {\n            let auth_status = verify(\n              data.sign,\n              gateway1_pubKey,\n              data.time_stamp\n            );\n\n            if (auth_status) {\n              setStatus((prev) => ({\n                ...prev,\n                cur_time_stamp: data.time_stamp,\n              }));\n              setComm((prev) => ({\n                ...commStatus,\n                res: rcv.toString(),\n                data: data,\n                enc: data.msg,\n                msg: decrypt(data.msg, keyPair.privKey_0x),\n              }));\n            } else {\n              console.log(\"Cannot verify gateway signature...\");\n            }\n          } else {\n            console.log(\"Timestamp is old...\");\n          }\n        }\n      });\n    });\n  }\n\n  /***************DEVICE REGISTRATION HANDLER********************/\n  function handleRegister() {\n    console.log(\"Requesting registration...\");\n    //The devID, PubKey encrypted with gateway public key is sent to the gateway on the topic register1.\n    let d = new Date();\n    let d_str = d.toString();\n    let sign = sign_it(keyPair.privKey, d_str);\n    let data = {\n      devId: keyPair.devId,\n      pubKey: keyPair.pubKey,\n      TS: d_str,\n      sign: sign,\n    };\n    let cipher = ecies.encrypt(\n      gateway1_pubKey,\n      Buffer.from(JSON.stringify(data))\n    );\n    let cipher_str = cipher.toString(\"hex\");\n    setReg((prev) => ({\n      ...prev,\n      reg_button_clicked: true,\n      req: data,\n      ct: cipher_str,\n    }));\n\n    setButton((prev) => ({\n      ...prev,\n      keysClicked: false,\n      startClicked: false,\n      registerClicked: true,\n      authClicked: false,\n      showRouteClicked: false\n    }));\n\n    client.publish(\"gateway1/register\", cipher_str);\n  }\n\n  /***************DEVCE AUTHENTICATION HANDLER********************/\n  function handleAuth() {\n    //Here the device requests the gateway for authentication.\n    //The gateway responds by sending a nonce.\n    console.log(\"Requesting for authentication...\");\n    setAuth((prev) => ({\n      ...prev,\n      auth_button_clicked: commStatus.devID.length === 0,\n    }));\n    setComm((prev) => ({\n      ...prev,\n      comm_button_clicked: commStatus.devID.length !== 0,\n    }));\n    let d = new Date();\n    let d_str = d.toString();\n    let data = {\n      devId: keyPair.devId,\n      TS: d_str,\n      recvId: commStatus.devID.length !== 0 ? commStatus.devID : null,\n    };\n    let cipher = ecies.encrypt(\n      gateway1_pubKey,\n      Buffer.from(JSON.stringify(data))\n    );\n    let cipher_str = cipher.toString(\"hex\");\n\n    setAuth((prev) => ({\n      ...prev,\n      ts1: d_str,\n      ct1: cipher_str,\n    }));\n\n    setButton((prev) => ({\n      ...prev,\n      keysClicked: false,\n      startClicked: false,\n      registerClicked: false,\n      authClicked: true,\n      showRouteClicked: false\n    }));\n    //console.log(\"destdevice :\",commStatus.devID);\n    \n\n    client.publish(\"gateway1/nonce\", cipher_str);\n  }\n\n  function handleShowRoute() {\n    setButton((prev) => ({\n      ...prev,\n      keysClicked: false,\n      startClicked: false,\n      registerClicked: false,\n      authClicked: false,\n      showRouteClicked: true\n    }));\n    setComm((prev) => ({\n      ...prev,\n      comm_button_clicked: commStatus.devID.length !== 0,\n    }));\n    return;\n  }\n\n  function onDevId(e) {\n    const inputValue = e.target.value;\n    if (inputValue.trim() === \"\") {\n      console.log(\"Input value is empty\");\n    } else {\n      console.log(\"Input value is not empty\");\n    }\n    setComm((prev) => ({\n      ...prev,\n      devID: e.target.value,\n    }));\n      \n  }\n\n  function onMsg(e) {\n    // setMsg((prev) => (e.target.value));\n    localStorage.setItem(\"msg\", e.target.value);\n  }\n\n  /************************COMPONENT TO BE RENDERED*****************************/\n  return (\n    <div className=\"App\">\n      <div class=\"page-header\">\n        <img src={bgpLogo} height=\"45\" width=\"45\" />\n        <h1> BGP Device </h1>\n      </div>\n      <div class=\"page-border\"></div>\n      <br></br>\n      <div class=\"parent\">\n        <div class=\"buttons\">\n          <Button className=\"button\" id=\"button1\" onClick={handleGenerate}>\n            {\" \"}\n            <span class=\"front\"> Keys </span>{\" \"}\n          </Button>\n          <div class=\"vertical\"></div>\n          <Button className=\"button\" id=\"button2\" onClick={handleStart}>\n            {\" \"}\n            <span class=\"front\">Start the device </span>\n          </Button>\n          <div class=\"vertical\"></div>\n          <Button className=\"button\" id=\"button3\" onClick={handleRegister}>\n            {\" \"}\n            <span class=\"front\"> Register </span>{\" \"}\n          </Button>\n          <div class=\"vertical\"></div>\n          <Button\n            className=\"button\"\n            id=\"button4\"\n            onClick={handleAuth}\n            disabled={false}\n          >\n            <span class=\"front\">Authenticate </span>\n          </Button>\n        </div>\n\n        <div class=\"cards\">\n          {!buttonStatus.keysClicked &&\n          !buttonStatus.startClicked &&\n          !buttonStatus.registerClicked &&\n          !buttonStatus.authClicked &&\n          !buttonStatus.showRouteClicked ? (\n            <div class=\"card1\">\n              <h3 className = \"swift-up-text\"> Hi, Welcome to BGP simulation </h3>\n            </div>\n          ) : (\n            <>{/* {console.log(\"Key pair not generated...\")} */}</>\n          )}\n\n          {buttonStatus.keysClicked && keyPair.privKey ? (\n            <div class=\"card1\">\n              <h4 class = \"swift-up-text\"> >> Keys </h4>\n\n              <p class = \"swift-up-text\">Device Id: {keyPair.devId}</p>\n              <p class = \"swift-up-text\">Public key: {keyPair.pubKey}</p>\n              <p class = \"swift-up-text\">Private key: {keyPair.privKey}</p>\n            </div>\n          ) : (\n            <>{/* {console.log(\"Key pair not generated...\")} */}</>\n          )}\n\n          {buttonStatus.startClicked && status.start_button_clicked ? (\n            <div class=\"card1\">\n              {!status.connected ? (\n                <h4> Connecting to broker</h4>\n              ) : (\n                <p>Device Ready!</p>\n              )}\n            </div>\n          ) : null}\n\n          {buttonStatus.registerClicked && regStatus.reg_button_clicked ? (\n            <div class=\"card1\">\n              <h4>Requesting registration...</h4>\n              <div class=\"card2\">\n                <h5>Device to gateway</h5>\n                <p>Device ID: {keyPair.devId}</p>\n                <p>Public key: {keyPair.pubKey}</p>\n                {regStatus.req ? (\n                  <div>\n                    <p>Timestamp of the request: {regStatus.req.TS}</p>\n                    <p>\n                      Signature (r, s): ( r:{\" \"}\n                      {regStatus.req.sign.r.substring(0, 40)}, s:{\" \"}\n                      {regStatus.req.sign.s.substring(0, 40)} )\n                    </p>\n                  </div>\n                ) : (\n                  <p>Signing...</p>\n                )}\n                <p>\n                  Encrypted request:{\" \"}\n                  {regStatus.ct ? regStatus.ct.substring(0, 40) + \"...\" : null}\n                </p>\n              </div>\n\n              <div class=\"card2\">\n                <h5>Gateway to device</h5>\n                {status.registered ? (\n                  <p>Registration status: TRUE</p>\n                ) : (\n                  <p>Registration status: FALSE</p>\n                )}\n              </div>\n            </div>\n          ) : null}\n\n          {buttonStatus.authClicked && authStatus.auth_button_clicked ? (\n            <div class=\"card1\">\n              <h4>Starting authentication process</h4>\n              <div class=\"card2\">\n                <h5>Request from device to gateway</h5>\n                <p>Device ID: {keyPair.devId}</p>\n                <p>\n                  Timestamp of the request:{\" \"}\n                  {authStatus.ts1 ? authStatus.ts1 : null}\n                </p>\n                <p>\n                  Cipher text:{\" \"}\n                  {authStatus.ct1 ? authStatus.ct1.substring(0, 40) : null}\n                </p>\n              </div>\n\n              <div class=\"card2\">\n                <h5>lbr response</h5>\n                {\n                  <div>\n                    <p>\n                      Received cipher text:{\" \"}\n                      {authStatus.res1 ? (\n                        authStatus.res1.substring(0, 40)\n                      ) : (\n                        <>Waiting...</>\n                      )}\n                    </p>\n                    <p>After decrypting: </p>\n                    {authStatus.data ? (\n                      <div>\n                        <p>\n                          Timestamp of the response:{\" \"}\n                          {authStatus.data.time_stamp}\n                        </p>\n                        <p>\n                          Signature (r, s): ( r:{\" \"}\n                          {authStatus.data.sign.r.substring(0, 40)}, s:{\" \"}\n                          {authStatus.data.sign.s.substring(0, 40)} )\n                        </p>\n                        {/* <p>Nonce received: {authStatus.data.nonce}</p> */}\n                      </div>\n                    ) : (\n                      <p>Waiting...</p>\n                    )}\n                  </div>\n                }\n              </div>\n\n              {/* <div class = \"card2\">\n            <h5>Device sending signed and encrypted nonce</h5>\n            <p>Device ID: {keyPair.devId}</p>\n            {\n              (authStatus.data2) ?\n              <div>\n                <p>Signing the nonce: {authStatus.data.nonce}</p>\n                <p>Device signature(r, s): ( r: {authStatus.data2.sign.r.substring(0,40)}, s: {authStatus.data2.sign.s.substring(0,40)} )</p>\n              </div>:\n              <p>Preparing response</p>\n            }\n            <p>Cipher text: {(authStatus.ct2) ? authStatus.ct2.substring(0,40) : null}</p>\n          </div> */}\n              {authStatus.res1 ? (\n                <div class=\"card2\">\n                  {!authStatus.res ? (\n                    <h5>Authentication successful!!</h5>\n                  ) : (\n                    <h5>Authentication failed :(</h5>\n                  )}\n                </div>\n              ) : null}\n            </div>\n          ) : null}\n\n          {commStatus.comm_button_clicked ? (\n            <div class=\"card1\">\n              <p>Starting authenticated routing process</p>\n\n              <div class=\"card2\">\n                <h5>Request from device to lbr</h5>\n                <p>Device ID: {keyPair.devId}</p>\n                <p>\n                  Timestamp of the request:{\" \"}\n                  {authStatus.ts1 ? authStatus.ts1 : null}\n                </p>\n                <p>\n                  Receiver's device id:{\" \"}\n                  {commStatus.devID ? commStatus.devID : null}\n                </p>\n                <p>\n                  Cipher text:{\" \"}\n                  {authStatus.ct1 ? authStatus.ct1.substring(0, 40) : null}\n                </p>\n              </div>\n\n              <div class=\"card2\">\n                <h5>Gateway response</h5>\n                <p>\n                  Received cipher text:{\" \"}\n                  {authStatus.res1 ? (\n                    authStatus.res1.substring(0, 40)\n                  ) : (\n                    <>Waiting...</>\n                  )}\n                </p>\n                <p>After decrypting: </p>\n                {authStatus.data ? (\n                  <div>\n                    <p>\n                      Timestamp of the response: {authStatus.data.time_stamp}\n                    </p>\n                    <p>\n                      Signature (r, s): ( r:{\" \"}\n                      {authStatus.data.sign.r.substring(0, 40)}, s:{\" \"}\n                      {authStatus.data.sign.s.substring(0, 40)} )\n                    </p>\n                    <p>Nonce received: {authStatus.data.nonce}</p>\n                    {authStatus.data.recvKey &&\n                    authStatus.data.recvKey.length > 0 ? (\n                      <p>Receiver public key: {authStatus.data.recvKey}</p>\n                    ) : (\n                      \"Error! Receiver is not registered!!\"\n                    )}\n                  </div>\n                ) : (\n                  <p>Waiting...</p>\n                )}\n              </div>\n            </div>\n          ) : null}\n\n\n        </div>\n\n        {\n          <div class=\"card3\">\n            <div className=\"recipientID\">\n              <p>Recipient deviceID: </p>\n              <input\n                type=\"text\"\n                placeholder=\"deviceID\"\n                onChange={onDevId}\n                value={commStatus.devID}\n              />\n            </div>\n            <br></br>\n\n            <Button\n              id=\"button6\"\n              style={{ width: \"100px\" }}\n              onClick={handleAuth}\n              disabled={false}\n            >\n              <span class=\"front\">Show Route</span>\n            </Button>\n          </div>\n        }\n      </div>\n      <img src={desktopMonitor} id=\"img123\" width=\"800\" height=\"80\" />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}