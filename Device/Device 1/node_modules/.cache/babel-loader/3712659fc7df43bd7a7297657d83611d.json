{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abhi\\\\Desktop\\\\etherium\\\\endproject\\\\Device\\\\Device 1\\\\src\\\\index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 7,\n  columnNumber: 3\n}, this), document.getElementById(\"root\"));\nconst canvas = document.querySelector('canvas');\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\nconst ctx = canvas.getContext('2d'); // Constants\n\nconst DENSITY = 200;\nconst VELOCITY = 0.5;\nconst MAX_DISTANCE = 100;\nconst MAX_CONNECTIONS = 10;\nconst light = new window.illuminated.Lamp({\n  position: new window.illuminated.Vec2(0, 0),\n  distance: (document.body.offsetWidth + document.body.offsetHeight) / 2,\n  diffuse: 1,\n  color: 'rgba(120,100,200,0.2)',\n  radius: 5,\n  samples: 0\n});\nconst mask = new window.illuminated.DarkMask({\n  lights: [light],\n  color: 'rgba(0,0,0,0.75)'\n}); // Capture mouse movement\n\nlet mouseX = 0,\n    mouseY = 0;\ncanvas.addEventListener('mousemove', e => {\n  mouseX = e.x;\n  mouseY = e.y;\n  light.position = new window.illuminated.Vec2(mouseX, mouseY);\n}); // Clamp n between min and max\n\nfunction clamp(n, min, max) {\n  if (n < min) return min;\n  if (n > max) return max;\n  return n;\n}\n\nconst startingPoints = new Array(DENSITY).fill(null).map(_ => [// x\nMath.random() * document.body.offsetWidth, // y\nMath.random() * document.body.offsetHeight, // direction x\nMath.random() < 0.5 ? -1 : 1, // direction y\nMath.random() < 0.5 ? -1 : 1, // color r\nclamp(Math.random() + 0.2, 0.2, 0.6), // color g\nclamp(Math.random() + 0.2, 0.2, 0.6), // color b\nclamp(Math.random() + 0.2, 0.2, 0.6)]).map(([x, y, dx, dy, cr, cg, cb]) => [~~x, ~~y, dx, dy, cr, cg, cb]);\nconst lighting = new window.illuminated.Lighting({\n  light,\n  objects: []\n});\nlet connectBlacklist = [];\n\nfunction update() {\n  // Reset blacklist\n  connectBlacklist = []; // Iterate over nodes\n\n  for (const p of startingPoints) {\n    let [oldx, oldy] = p; // Update position\n\n    p[0] += Math.random() * VELOCITY * p[2];\n    p[1] += Math.random() * VELOCITY * p[3]; // Destructure node\n\n    let [x, y] = p; // Boundary check X\n\n    if (x < 0 || x > document.body.offsetWidth) {\n      p[2] *= -1;\n    } // Boundary check Y\n\n\n    if (y < 0 || y > document.body.offsetHeight) {\n      p[3] *= -1;\n    } // Mouse collision\n\n\n    const dist = 50;\n\n    if ((Math.abs(mouseX - x) < dist || Math.abs(x - mouseX) < dist) && (Math.abs(mouseY - y) < dist || Math.abs(y - mouseY) < dist)) {\n      p[0] += VELOCITY * p[2] * 10;\n      p[1] += VELOCITY * p[3] * 10;\n    }\n  }\n}\n\nfunction drawPoint([x, y]) {\n  ctx.beginPath();\n  ctx.arc(x, y, 2, 0, 2 * Math.PI, false);\n  ctx.fillStyle = 'white';\n  ctx.fill();\n}\n\nfunction connectPoint(thisp, dist) {\n  let n = 0;\n  let strength = 0;\n  const [x, y, dx, dy, cr, cg, cb] = thisp;\n  connectBlacklist.push(thisp); // Iterate over points\n\n  for (const p of startingPoints) {\n    // Destructure node\n    const [px, py] = p; // Validate move\n\n    if (n > MAX_CONNECTIONS) return;\n    if (connectBlacklist.includes(p)) continue; // Validate distance\n\n    if (Math.abs(x - px) < dist && Math.abs(y - py) < dist) {\n      // Calculate connection strength\n      strength += (Math.abs(x - px) + Math.abs(y - py)) / 2;\n      let avg = clamp(strength / (n + 1), 0, MAX_DISTANCE * 2);\n      let fac = avg / MAX_DISTANCE * 255; // Calculate color from connection strength\n\n      let r = clamp(fac * cr, 0, 125);\n      let g = clamp(fac * cg, 0, 125);\n      let b = clamp(fac * cb, 0, 125);\n      let a = clamp(avg / (MAX_DISTANCE * 0.75), .3, .9);\n      let color = `rgba(${r},${r},${g},${a})`; // Draw line\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(px, py);\n      ctx.strokeStyle = color;\n      ctx.stroke(); // Increment node count\n\n      n += 1; // Add node to blacklist\n\n      connectBlacklist.push(p);\n    }\n  }\n}\n\nfunction draw() {\n  ctx.fillStyle = 'rgb(20,20,25)';\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n  for (const p of startingPoints) {\n    drawPoint(p);\n    connectPoint([mouseX, mouseY], MAX_DISTANCE * 1.5, Math.random(), Math.random(), Math.random());\n    connectPoint(p, MAX_DISTANCE);\n  } // light.render(ctx);\n\n\n  lighting.compute(canvas.width, canvas.height);\n  lighting.render(ctx);\n  mask.compute(canvas.width, canvas.height);\n  mask.render(ctx);\n}\n\nfunction loop() {\n  update();\n  draw();\n  window.requestAnimationFrame(loop);\n}\n\nloop();","map":{"version":3,"sources":["C:/Users/abhi/Desktop/etherium/endproject/Device/Device 1/src/index.js"],"names":["React","ReactDOM","App","render","document","getElementById","canvas","querySelector","width","window","innerWidth","height","innerHeight","ctx","getContext","DENSITY","VELOCITY","MAX_DISTANCE","MAX_CONNECTIONS","light","illuminated","Lamp","position","Vec2","distance","body","offsetWidth","offsetHeight","diffuse","color","radius","samples","mask","DarkMask","lights","mouseX","mouseY","addEventListener","e","x","y","clamp","n","min","max","startingPoints","Array","fill","map","_","Math","random","dx","dy","cr","cg","cb","lighting","Lighting","objects","connectBlacklist","update","p","oldx","oldy","dist","abs","drawPoint","beginPath","arc","PI","fillStyle","connectPoint","thisp","strength","push","px","py","includes","avg","fac","r","g","b","a","moveTo","lineTo","strokeStyle","stroke","draw","clearRect","fillRect","compute","loop","requestAnimationFrame"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nconst canvas = document.querySelector('canvas');\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\nconst ctx = canvas.getContext('2d');\n\n// Constants\nconst DENSITY = 200;\nconst VELOCITY = 0.5;\nconst MAX_DISTANCE = 100;\nconst MAX_CONNECTIONS = 10;\n\nconst light = new window.illuminated.Lamp({  \n  position: new window.illuminated.Vec2(0, 0),  \n  distance: (document.body.offsetWidth + document.body.offsetHeight) / 2,  \n  diffuse: 1,  \n  color: 'rgba(120,100,200,0.2)',  \n  radius: 5,\n  samples: 0,\n});\n\nconst mask = new window.illuminated.DarkMask({ lights: [light], color: 'rgba(0,0,0,0.75)' });\n\n// Capture mouse movement\nlet mouseX = 0, mouseY = 0;\ncanvas.addEventListener('mousemove', e => {\n  mouseX = e.x;\n  mouseY = e.y;\n  light.position = new window.illuminated.Vec2(mouseX, mouseY);\n});\n\n// Clamp n between min and max\nfunction clamp(n, min, max) {\n  if (n < min) return min;\n  if (n > max) return max;\n  return n;\n}\n\nconst startingPoints = new Array(DENSITY)\n  .fill(null)\n  .map(_ => [\n    // x\n    Math.random() * document.body.offsetWidth,\n    // y\n    Math.random() * document.body.offsetHeight,\n    // direction x\n    Math.random() < 0.5 ? -1 : 1,\n    // direction y\n    Math.random() < 0.5 ? -1 : 1,\n    // color r\n    clamp(Math.random() + 0.2, 0.2, 0.6),\n    // color g\n    clamp(Math.random() + 0.2, 0.2, 0.6),\n    // color b\n    clamp(Math.random() + 0.2, 0.2, 0.6),\n  ])\n  .map(([x, y, dx, dy, cr, cg, cb]) => [~~x, ~~y, dx, dy, cr, cg, cb]);\n\nconst lighting = new window.illuminated.Lighting({ light, objects: [] });\n\nlet connectBlacklist = [];\n\nfunction update() {\n  \n  // Reset blacklist\n  connectBlacklist = [];\n  \n  // Iterate over nodes\n  for (const p of startingPoints) {\n    \n    let [oldx, oldy] = p;\n    \n    // Update position\n    p[0] += Math.random() * VELOCITY * p[2];\n    p[1] += Math.random() * VELOCITY * p[3];\n    \n    // Destructure node\n    let [x, y] = p;\n    \n    // Boundary check X\n    if (x < 0 || x > document.body.offsetWidth) {\n      p[2] *= -1;\n    }\n    \n    // Boundary check Y\n    if (y < 0 || y > document.body.offsetHeight) {\n      p[3] *= -1;\n    }\n    \n    // Mouse collision\n    const dist = 50;\n    if (\n      (Math.abs(mouseX - x) < dist || Math.abs(x - mouseX) < dist) &&\n      (Math.abs(mouseY - y) < dist || Math.abs(y - mouseY) < dist)\n    ) {\n      p[0] += VELOCITY * p[2] * 10;\n      p[1] += VELOCITY * p[3] * 10;\n    }\n  }\n}\n\nfunction drawPoint([x, y]) {\n  ctx.beginPath();\n  ctx.arc(x, y, 2, 0, 2 * Math.PI, false);\n  ctx.fillStyle = 'white';\n  ctx.fill();\n}\n\nfunction connectPoint(thisp, dist) {\n  let n = 0;\n  let strength = 0;\n  const [x, y, dx, dy, cr, cg, cb] = thisp;\n  connectBlacklist.push(thisp);\n  \n  // Iterate over points\n  for (const p of startingPoints) {\n    \n    // Destructure node\n    const [px, py] = p;\n    \n    // Validate move\n    if (n > MAX_CONNECTIONS) return;\n    if (connectBlacklist.includes(p)) continue;\n    \n    // Validate distance\n    if (Math.abs(x - px) < dist && Math.abs(y - py) < dist) {\n      \n      // Calculate connection strength\n      strength += (Math.abs(x - px) + Math.abs(y - py)) / 2;\n      let avg = clamp(strength / (n + 1), 0, MAX_DISTANCE * 2);\n      let fac = (avg / MAX_DISTANCE) * 255;\n      \n      // Calculate color from connection strength\n      let r = clamp(fac * cr, 0, 125);\n      let g = clamp(fac * cg, 0, 125);\n      let b = clamp(fac * cb, 0, 125);\n      let a = clamp(avg / (MAX_DISTANCE * 0.75), .3, .9);\n      let color = `rgba(${r},${r},${g},${a})`;\n      \n      // Draw line\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(px, py);\n      ctx.strokeStyle = color;\n      ctx.stroke();\n      \n      // Increment node count\n      n += 1;\n      \n      // Add node to blacklist\n      connectBlacklist.push(p);\n    }\n  }\n}\n\nfunction draw() {\n  ctx.fillStyle = 'rgb(20,20,25)';\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  for (const p of startingPoints) {\n    drawPoint(p);\n    connectPoint([mouseX, mouseY], MAX_DISTANCE * 1.5, Math.random(), Math.random(), Math.random());\n    connectPoint(p, MAX_DISTANCE);\n  }\n  // light.render(ctx);\n  lighting.compute(canvas.width, canvas.height);\n  lighting.render(ctx);\n  mask.compute(canvas.width, canvas.height);\n  mask.render(ctx);\n}\n\nfunction loop() {\n  update();\n  draw();\n  window.requestAnimationFrame(loop);\n}\n\nloop();"]},"metadata":{},"sourceType":"module"}